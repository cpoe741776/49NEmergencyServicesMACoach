==== ./src/App.tsx ====
import { useEffect, useMemo, useState } from "react";
import type { MentalArmorSkill } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";
import GoBag from "@/components/GoBag";
import RepairKit from "@/components/RepairKit";
import Profile from "@/components/Profile";
import SkillDetail from "@/components/SkillDetail";

type View = "go-bag" | "detail" | "repair-kit" | "profile";

// Add TypeScript declaration for global function
declare global {
  interface Window {
    navigateToGoBag?: (skillId: string) => void;
  }
}

export default function App() {
  const [currentView, setCurrentView] = useState<View>("go-bag");
  const [selectedSkill, setSelectedSkill] = useState<MentalArmorSkill | null>(null);
  const [skillFromChat, setSkillFromChat] = useState<string | null>(null);

  const appMode = (import.meta.env.VITE_APP_MODE as string) || "demo";

  // Title per view (optional nicety)
  const title = useMemo(() => {
    switch (currentView) {
      case "go-bag":
        return "Mental Armor‚Ñ¢ Skills Go-Bag";
      case "detail":
        return selectedSkill ? selectedSkill.title : "Skill Detail";
      case "repair-kit":
        return "Maintenance & Repair Kit";
      case "profile":
        return "Your Profile & Practice Kit";
      default:
        return "Mental Armor‚Ñ¢ Coach";
    }
  }, [currentView, selectedSkill]);

  useEffect(() => {
    document.title = `Mental Armor‚Ñ¢ ‚Äî ${title}`;
  }, [title]);

  // Handle navigation from chat to skills
  useEffect(() => {
    // Check for pending skill navigation from chat
    const pendingSkill = localStorage.getItem('pending-skill-navigation');
    if (pendingSkill && currentView === 'go-bag') {
      const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === pendingSkill);
      if (skill) {
        setSelectedSkill(skill);
        setCurrentView('detail');
        setSkillFromChat(pendingSkill);
      }
      localStorage.removeItem('pending-skill-navigation');
    }

    // Check for direct skill selection from chat
    const selectedFromChat = localStorage.getItem('selected-skill-from-chat');
    if (selectedFromChat && currentView === 'go-bag') {
      try {
        const { id } = JSON.parse(selectedFromChat);
        const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === id);
        if (skill) {
          setSelectedSkill(skill);
          setCurrentView('detail');
          setSkillFromChat(id);
        }
      } catch (error) {
        console.warn('Error parsing selected skill from chat:', error);
      }
      localStorage.removeItem('selected-skill-from-chat');
    }
  }, [currentView]);

  // Add global navigation function for RepairKit
  useEffect(() => {
    window.navigateToGoBag = (skillId: string) => {
      const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
      if (skill) {
        setSelectedSkill(skill);
        setCurrentView('go-bag');
        setSkillFromChat(skillId);
        
        // Small delay to ensure view change, then navigate to detail
        setTimeout(() => {
          setCurrentView('detail');
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }, 100);
      }
    };

    // Cleanup
    return () => {
      delete window.navigateToGoBag;
    };
  }, []);

  // Simple top nav link
  const NavLink = ({
    id,
    label,
    icon,
  }: {
    id: View;
    label: string;
    icon: string;
  }) => (
    <button
      onClick={() => {
        setCurrentView(id);
        if (id !== "detail") {
          setSelectedSkill(null);
          setSkillFromChat(null);
        }
        window.scrollTo({ top: 0, behavior: "smooth" });
      }}
      className={`inline-flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors
        ${
          currentView === id
            ? "bg-brand-primary text-white"
            : "bg-white text-gray-700 border border-gray-200 hover:bg-gray-50"
        }`}
    >
      <span>{icon}</span>
      <span>{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* App Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-4 py-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
          <div className="flex items-center gap-3">
            <div className="h-9 w-9 rounded-lg bg-brand-primary/10 flex items-center justify-center">
              <span className="text-brand-primary text-lg">üõ°Ô∏è</span>
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-900">
                Mental Armor‚Ñ¢ Coach
              </h1>
              <p className="text-xs text-gray-500">
                Supporting app for the Mental Armor‚Ñ¢ curriculum by 49 North (TechWerks)
              </p>
            </div>
          </div>

          <div className="flex flex-wrap gap-2">
            <NavLink id="go-bag" label="Skills Go-Bag" icon="üéí" />
            <NavLink id="repair-kit" label="Repair Kit" icon="üõ†Ô∏è" />
            <NavLink id="profile" label="Profile" icon="üë§" />
          </div>
        </div>
      </header>

      {/* Demo badge */}
      {appMode === "demo" && (
        <div className="bg-amber-50 border-b border-amber-200">
          <div className="max-w-6xl mx-auto px-4 py-2 text-amber-800 text-sm">
            DEMO MODE ‚Äî contact numbers may be masked; AI responses may use a light demo model.
          </div>
        </div>
      )}

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 py-6">
        {currentView === "go-bag" && (
          <GoBag
            onSelect={(skill: MentalArmorSkill) => {
              setSelectedSkill(skill);
              setCurrentView("detail");
              setSkillFromChat(null); // Reset chat indicator for manual selections
            }}
          />
        )}

        {currentView === "detail" && selectedSkill && (
          <SkillDetail
            skill={selectedSkill}
            fromChat={skillFromChat === selectedSkill.id}
            onBack={() => {
              setCurrentView("go-bag");
              setSelectedSkill(null);
              setSkillFromChat(null);
            }}
            onStartPractice={(skill) => {
              // Handoff to Repair Kit
              localStorage.setItem(
                "start-practice-skill",
                JSON.stringify({ id: skill.id, title: skill.title })
              );
              setCurrentView("repair-kit");
            }}
          />
        )}

        {currentView === "repair-kit" && <RepairKit />}

        {currentView === "profile" && <Profile />}
      </main>

      {/* Footer */}
      <footer className="border-t border-gray-200 bg-white">
        <div className="max-w-6xl mx-auto px-4 py-4 text-xs text-gray-500">
          Mental Armor‚Ñ¢ is a program of 49 North‚Ñ¢ (TechWerks, LLC). This application supports learning and
          practice; it is not a substitute for clinical care. In an emergency call 911/999, or in the U.S. dial 988.
        </div>
      </footer>
    </div>
  );
}


==== ./src/main.tsx ====
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)



==== ./src/types/emergency.ts ====
// Core domains
export type MFADomain = 'emotional' | 'social' | 'family' | 'spiritual';

// Training modules
export type MentalArmorModule =
  | 'Foundation'
  | 'Values & Meaning'
  | 'Resilient Thinking'
  | 'Social Resilience';

// A single skill (now supports multiple modules)
export interface MentalArmorSkill {
  id: string;
  title: string;
  trainer: string;                 // e.g., "Rhonda"
  modules: MentalArmorModule[];    // NOTE: plural
  domains: MFADomain[];            // MFA measures it supports
  goal: string;
  whenToUse: string;
  benefits: string[];
  steps: string[];
  image?: string;                  // public path like /skills/xxx.jpg
}

// Enhanced types for RepairKit functionality
export interface ChatMessage {
  id: string;
  type: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  isEmergencyAlert?: boolean;
  skillId?: string;                // Link to specific skill if relevant
}

export interface EmergencyResource {
  type: 'crisis' | 'internal' | 'chaplain' | 'peer' | 'psychology' | 'supervisor';
  name: string;
  phone: string;
  email?: string;
  available?: string;              // e.g., "24/7", "Mon-Fri 9-5"
  description?: string;
  isInternal?: boolean;            // Organization-specific resource
}

export interface PracticeSession {
  id: string;
  skillId: string;
  skillTitle: string;
  startTime: Date;
  endTime?: Date;
  notes?: string;
  completed: boolean;
  duration?: number;               // in minutes
  effectiveness?: number;          // 1-5 rating
}

export interface OrganizationConfig {
  id: string;
  name: string;
  emergencyResources: EmergencyResource[];
  features: {
    aiChatEnabled: boolean;
    practiceSessionsEnabled: boolean;
    emergencyDetectionEnabled: boolean;
    anonymousMode: boolean;
  };
  customization: {
    primaryColor?: string;
    logoUrl?: string;
    welcomeMessage?: string;
  };
}

export interface UserProgress {
  userId: string;
  equippedSkills: string[];        // Array of skill IDs
  completedSessions: PracticeSession[];
  totalPracticeTime: number;       // in minutes
  skillLevels: Record<string, number>; // skillId -> level (1-5)
  lastActive: Date;
  preferences: {
    reminderFrequency: 'daily' | 'weekly' | 'monthly' | 'none';
    preferredTrainers: string[];
    focusAreas: MFADomain[];
  };
}

// AI Chat related types
export interface AIResponse {
  content: string;
  confidence: number;              // 0-1
  suggestedSkills?: string[];      // Skill IDs to recommend
  requiresEscalation?: boolean;    // Emergency detected
  followUpQuestions?: string[];
}

export interface ChatContext {
  userId: string;
  sessionId: string;
  currentSkill?: string;
  recentMessages: ChatMessage[];
  userEmotionalState?: 'calm' | 'stressed' | 'crisis' | 'unknown';
  practiceMode: boolean;
}

// Safety and emergency detection
export interface EmergencyDetection {
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  keywords: string[];
  confidence: number;
  recommendedAction: 'continue' | 'provide_resources' | 'escalate' | 'emergency_protocol';
  detectedAt: Date;
}

// Demo mode configuration
export interface DemoConfig {
  enabled: boolean;
  restrictedFeatures: string[];    // Features disabled in demo
  maxChatMessages?: number;
  maxPracticeSessions?: number;
  showWatermark: boolean;
  demoMessage?: string;
}


==== ./src/config/environment.ts ====
// Environment configuration for the Mental Armor app

export interface AppEnvironment {
  mode: 'development' | 'production' | 'demo';
  openai: {
    apiKey?: string;
    enabled: boolean;
    model: string;
  };
  features: {
    emergencyDetection: boolean;
    aiChatEnabled: boolean;
    dataCollection: boolean;
    analytics: boolean;
  };
  organization: {
    name: string;
    logoUrl?: string;
    customColors?: {
      primary: string;
      secondary: string;
    };
  };
}

// Default configuration
const defaultConfig: AppEnvironment = {
  mode: 'development',
  openai: {
    enabled: false, // Set to true when you have API key
    model: 'gpt-4',
  },
  features: {
    emergencyDetection: true,
    aiChatEnabled: false, // Will be true when OpenAI is configured
    dataCollection: false, // For demo mode
    analytics: false,
  },
  organization: {
    name: '49 North‚Ñ¢',
    logoUrl: '/logo.png',
    customColors: {
      primary: '#003049',
      secondary: '#1E3A8A'
    }
  }
};

// Production configuration template
const productionConfig: AppEnvironment = {
  mode: 'production',
  openai: {
    enabled: true,
    model: 'gpt-4',
    // apiKey will be loaded from environment variable
  },
  features: {
    emergencyDetection: true,
    aiChatEnabled: true,
    dataCollection: true,
    analytics: true,
  },
  organization: {
    name: 'Your Organization Name',
    logoUrl: '/your-logo.png',
    customColors: {
      primary: '#003049',
      secondary: '#1E3A8A'
    }
  }
};

// Demo configuration for tradeshows
const demoConfig: AppEnvironment = {
  mode: 'demo',
  openai: {
    enabled: false, // Use simulated responses
    model: 'gpt-4',
  },
  features: {
    emergencyDetection: true,
    aiChatEnabled: true, // Simulated
    dataCollection: false,
    analytics: false,
  },
  organization: {
    name: 'Demo Fire Department',
    logoUrl: '/demo-logo.png',
  }
};

// Environment detection and configuration loading
export function loadEnvironmentConfig(): AppEnvironment {
  const mode = (import.meta.env.VITE_APP_MODE as AppEnvironment['mode']) || 'development';
  
  switch (mode) {
    case 'production':
      return {
        ...productionConfig,
        openai: {
          ...productionConfig.openai,
          apiKey: import.meta.env.VITE_OPENAI_API_KEY,
          enabled: !!import.meta.env.VITE_OPENAI_API_KEY,
        },
        features: {
          ...productionConfig.features,
          aiChatEnabled: !!import.meta.env.VITE_OPENAI_API_KEY,
        },
        organization: {
          ...productionConfig.organization,
          name: import.meta.env.VITE_ORG_NAME || productionConfig.organization.name,
          logoUrl: import.meta.env.VITE_ORG_LOGO || productionConfig.organization.logoUrl,
        }
      };
      
    case 'demo':
      return demoConfig;
      
    default:
      return {
        ...defaultConfig,
        openai: {
          ...defaultConfig.openai,
          apiKey: import.meta.env.VITE_OPENAI_API_KEY,
          enabled: !!import.meta.env.VITE_OPENAI_API_KEY,
        },
        features: {
          ...defaultConfig.features,
          aiChatEnabled: !!import.meta.env.VITE_OPENAI_API_KEY,
        }
      };
  }
}

// Utility functions
export function isFeatureEnabled(feature: keyof AppEnvironment['features']): boolean {
  const config = loadEnvironmentConfig();
  return config.features[feature];
}

export function getOpenAIConfig() {
  const config = loadEnvironmentConfig();
  return config.openai;
}

export function isDemoMode(): boolean {
  return loadEnvironmentConfig().mode === 'demo';
}

export function isProductionMode(): boolean {
  return loadEnvironmentConfig().mode === 'production';
}

// Export the current configuration
export const appConfig = loadEnvironmentConfig();

/*
ENVIRONMENT VARIABLES TO SET UP:

For development (.env.local):
VITE_APP_MODE=development
VITE_OPENAI_API_KEY=your_openai_api_key_here
VITE_ORG_NAME="Your Organization Name"
VITE_ORG_LOGO="/your-logo.png"

For production (.env.production):
VITE_APP_MODE=production
VITE_OPENAI_API_KEY=your_production_openai_api_key
VITE_ORG_NAME="Your Organization Name"
VITE_ORG_LOGO="/your-logo.png"

For demo (.env.demo):
VITE_APP_MODE=demo

NETLIFY DEPLOYMENT:
In your Netlify dashboard, set these environment variables:
- VITE_APP_MODE: production (or demo for demo version)
- VITE_OPENAI_API_KEY: your API key
- VITE_ORG_NAME: your organization name
- VITE_ORG_LOGO: path to your logo

GITHUB INTEGRATION:
1. Add these environment variables to your GitHub repository secrets
2. Update your build command in package.json to use the appropriate .env file
3. Netlify will automatically pick up the environment variables from your build
*/


==== ./src/utils/practiceKit.ts ====
// src/utils/practiceKit.ts
const PRACTICE_KIT_STORAGE_KEY = 'mental-armor-practice-kit';

export const practiceKitUtils = {
  // Get all skill IDs from practice kit
  getPracticeKitSkills(): string[] {
    try {
      const stored = localStorage.getItem(PRACTICE_KIT_STORAGE_KEY);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('Error loading practice kit:', error);
      return [];
    }
  },

  // Add a skill to practice kit
  addSkillToPracticeKit(skillId: string): void {
    const currentSkills = this.getPracticeKitSkills();
    if (!currentSkills.includes(skillId)) {
      const updatedSkills = [...currentSkills, skillId];
      localStorage.setItem(PRACTICE_KIT_STORAGE_KEY, JSON.stringify(updatedSkills));
      
      // Dispatch custom event to notify other components
      window.dispatchEvent(new CustomEvent('practiceKitUpdated', { 
        detail: { skillId, action: 'added' } 
      }));
    }
  },

  // Remove a skill from practice kit
  removeSkillFromPracticeKit(skillId: string): void {
    const currentSkills = this.getPracticeKitSkills();
    const updatedSkills = currentSkills.filter(id => id !== skillId);
    localStorage.setItem(PRACTICE_KIT_STORAGE_KEY, JSON.stringify(updatedSkills));
    
    // Dispatch custom event to notify other components
    window.dispatchEvent(new CustomEvent('practiceKitUpdated', { 
      detail: { skillId, action: 'removed' } 
    }));
  },

  // Check if a skill is in practice kit
  isSkillInPracticeKit(skillId: string): boolean {
    const currentSkills = this.getPracticeKitSkills();
    return currentSkills.includes(skillId);
  },

  // Clear all skills from practice kit
  clearPracticeKit(): void {
    localStorage.removeItem(PRACTICE_KIT_STORAGE_KEY);
    
    // Dispatch custom event to notify other components
    window.dispatchEvent(new CustomEvent('practiceKitUpdated', { 
      detail: { action: 'cleared' } 
    }));
  },

  // Get practice kit count
  getPracticeKitCount(): number {
    return this.getPracticeKitSkills().length;
  },

  // Toggle skill in practice kit (add if not present, remove if present)
  toggleSkillInPracticeKit(skillId: string): boolean {
    if (this.isSkillInPracticeKit(skillId)) {
      this.removeSkillFromPracticeKit(skillId);
      return false; // Skill was removed
    } else {
      this.addSkillToPracticeKit(skillId);
      return true; // Skill was added
    }
  }
};


==== ./src/components/RepairKit-original.tsx ====
// src/components/RepairKit.tsx
import { useState, useRef, useEffect } from "react";
import type { MentalArmorSkill } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";
import { TRAINERS, type Trainer } from "@/data/trainers";
import { createMentalArmorAI } from "@/services/openai-integration";
import {
  DEFAULT_EMERGENCY_RESOURCES,
  EMERGENCY_KEYWORDS,
  CRISIS_KEYWORDS,
} from "@/config/repair-kit-config";

const openAIApiKey = import.meta.env.VITE_OPENAI_API_KEY as string | undefined;
const aiService = createMentalArmorAI(openAIApiKey);

type ChatKind = "user" | "assistant" | "system";
type Distress = "none" | "low" | "medium" | "high" | "critical";

interface ChatMessage {
  id: string;
  type: ChatKind;
  content: string;
  timestamp: Date;
  isEmergencyAlert?: boolean;
  trainerId?: string;
}

interface PracticeSession {
  id: string;
  skillId: string;
  skillTitle: string;
  startTime: Date;
  endTime?: Date;
  notes?: string;
  completed: boolean;
  trainerId?: string;
}

export default function RepairKit() {
  const [activeTab, setActiveTab] = useState<"chat" | "practice" | "resources" | "coaches">("coaches");
  const [selectedTrainer, setSelectedTrainer] = useState<Trainer | null>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showEmergencyAlert, setShowEmergencyAlert] = useState(false);
  const [practiceSessions, setPracticeSessions] = useState<PracticeSession[]>([]);
  const [selectedSkillForPractice, setSelectedSkillForPractice] = useState<MentalArmorSkill | null>(null);
  const [disclaimerAccepted, setDisclaimerAccepted] = useState(false);
  // NEW: expanded bio toggle state
  const [expandedBioId, setExpandedBioId] = useState<string | null>(null);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // autoscroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // welcome message on trainer select
  useEffect(() => {
    if (selectedTrainer && messages.length === 0) {
      setMessages([
        {
          id: crypto.randomUUID(),
          type: "assistant",
          content: getTrainerWelcomeMessage(selectedTrainer),
          timestamp: new Date(),
          trainerId: selectedTrainer.id,
        },
      ]);
    }
  }, [selectedTrainer, messages.length]);

  // handoff from SkillDetail/Profile without bringing in a function dependency
  useEffect(() => {
    const raw = localStorage.getItem("start-practice-skill");
    if (!raw) return;
    try {
      const { id } = JSON.parse(raw);
      const found = MENTAL_ARMOR_SKILLS.find((s) => s.id === id);
      if (found) {
        const session: PracticeSession = {
          id: crypto.randomUUID(),
          skillId: found.id,
          skillTitle: found.title,
          startTime: new Date(),
          completed: false,
          // avoid depending on selectedTrainer here to keep deps empty
          trainerId: undefined,
        };
        setPracticeSessions((p) => [...p, session]);
        setSelectedSkillForPractice(found);
        setActiveTab("practice");
      }
    } catch {
      // ignore JSON errors
    } finally {
      localStorage.removeItem("start-practice-skill");
    }

  }, []);

  const detectDistressLevel = (text: string): Distress => {
    const t = text.toLowerCase();
    if (CRISIS_KEYWORDS.CRITICAL.some((k: string) => t.includes(k.toLowerCase()))) return "critical";
    if (CRISIS_KEYWORDS.HIGH.some((k: string) => t.includes(k.toLowerCase()))) return "high";
    if (CRISIS_KEYWORDS.MEDIUM.some((k: string) => t.includes(k.toLowerCase()))) return "medium";
    if (CRISIS_KEYWORDS.LOW.some((k: string) => t.includes(k.toLowerCase()))) return "low";
    return "none";
  };

  const detectEmergencySignals = (text: string): boolean => {
    const t = text.toLowerCase();
    const hasEmergency = EMERGENCY_KEYWORDS.some((k: string) => t.includes(k.toLowerCase()));
    const hasCritical = CRISIS_KEYWORDS.CRITICAL.some((k: string) => t.includes(k.toLowerCase()));
    return hasEmergency || hasCritical;
  };

  const getTrainerWelcomeMessage = (trainer: Trainer): string => {
    switch (trainer.id) {
      case "scotty":
        return `Well hello there, friend! I'm Scotty. Building resilience is like tending a garden‚Äîpatience, care, and a little faith. What's on your mind today?`;
      case "rhonda":
        return `I'm BG Rhonda Cornum. We're here to build your mental armor‚Äîno excuses, no shortcuts. What challenge are you facing today?`;
      case "jill":
        return `Hi, I'm Dr. Jill. Let's explore your resilience journey with insight and practical tools. What would you like to work on today?`;
      case "terry":
        return `Hey‚ÄîTerry here. Life‚Äôs got a sense of humor. We‚Äôll build strength through it. What's going on in your world?`;
      case "aj":
        return `Hi! I'm AJ. Love helping people discover strengths. What goal are you excited to tackle?`;
      case "chris":
        return `I'm Chris‚ÄîFirst Sergeant, dad, and growth nerd. True strength comes from hard moments. What's weighing on your mind?`;
      default:
        return `Hello! I'm ${trainer.name}, your Mental Armor‚Ñ¢ Coach. How can I support your training today?`;
    }
  };

  const getTrainerBackgroundResponse = (trainer: Trainer): string => {
    switch (trainer.id) {
      case "scotty":
        return `In life I'm Gerald "Scotty" Bryan (DHS, resilience leader). Here, I‚Äôm your AI Mental Armor‚Ñ¢ Coach‚Äîwarm, practical, no-nonsense.`;
      case "rhonda":
        return `I'm BG (Ret.) Rhonda Cornum, PhD, MD‚Äîcombat veteran, former POW, architect of Army CSF. Here, I‚Äôm your AI coach‚Äîdirect and focused.`;
      case "jill":
        return `I'm Dr. Jill Antonishak‚Äîcommunity & developmental psychologist. Here, I‚Äôm your AI coach to practice skills (not therapy).`;
      case "terry":
        return `I'm Terry‚Äîformer Bronx teacher, MSW, culture-builder. Here, I‚Äôm your AI coach with practical wisdom and humor.`;
      case "aj":
        return `I'm AJ‚Äîearly MAPP grad, applied positive psychology. Here, I‚Äôm your AI coach to help you flex strengths.`;
      case "chris":
        return `I'm Christopher Poe‚ÄîFirst Sergeant (ret). Here, I‚Äôm your AI coach for reflection and skill-building.`;
      default:
        return `I'm ${trainer.name}, drawing from resilience experience. Here, I‚Äôm your AI coach for Mental Armor‚Ñ¢ skills.`;
    }
  };

  const getTrainerResponse = (trainer: Trainer, userMessage: string): string => {
    const backgroundQ = [
      "who are you",
      "tell me about yourself",
      "your background",
      "your experience",
      "your credentials",
      "are you a therapist",
      "are you a doctor",
      "are you real",
      "your qualifications",
    ];
    if (backgroundQ.some((q) => userMessage.toLowerCase().includes(q))) {
      return getTrainerBackgroundResponse(trainer);
    }

    const mentionedSkill = MENTAL_ARMOR_SKILLS.find(
      (s) =>
        userMessage.toLowerCase().includes(s.title.toLowerCase()) ||
        s.title.toLowerCase().includes(userMessage.toLowerCase())
    );

    const base = mentionedSkill
      ? `Let's work on "${mentionedSkill.title}". ${mentionedSkill.goal}`
      : "That's a thoughtful question about resilience training.";

    switch (trainer.id) {
      case "rhonda":
        return `${base} This skill works if you work it. What‚Äôs your next move?`;
      case "jill":
        return `${base} Let's connect it to your patterns. What‚Äôs happening right now?`;
      case "terry":
        return `${base} It works in the real world when you practice. What's the real situation?`;
      case "aj":
        return `${base} It builds on your strengths. What do you notice you already do well?`;
      case "chris":
        return `${base} Growth often comes from hard moments. What's the deeper challenge?`;
      default:
        return base;
    }
  };

  const getDistressResponse = (trainer: Trainer, _userMessage: string, level: Exclude<Distress, "none">): string => {
    const primaryContacts = "US: 988 | Canada: 1-833-456-4566 | UK: 116 123 | Emergency: 911/999";
    const fullContacts = `üá∫üá∏ United States:
‚Ä¢ Suicide & Crisis Lifeline: 988 (24/7)
‚Ä¢ Crisis Text Line: Text HOME to 741741 (24/7)
‚Ä¢ Emergency: 911

üá®üá¶ Canada:
‚Ä¢ Canada Suicide Prevention Service: 1-833-456-4566 (24/7)
‚Ä¢ Crisis Text Line: Text CONNECT to 686868 (24/7)
‚Ä¢ Emergency: 911

üá¨üáß United Kingdom:
‚Ä¢ Samaritans: 116 123 (24/7)
‚Ä¢ Crisis Text Line: Text SHOUT to 85258 (24/7)
‚Ä¢ Emergency: 999`;

    if (level === "critical") {
      return `I'm very concerned about your safety. Please reach out immediately:\n\n${fullContacts}\n\nYour life has value. We can pause practice and focus on safety first.`;
    }
    if (level === "high") {
      return `I hear you‚Äôre in real pain. If you need immediate help: ${primaryContacts}\n\nWe can anchor to meaning‚Äîtry Values-Based Living, Spiritual Resilience, or What‚Äôs Most Important. Which fits right now?`;
    }
    if (level === "medium") {
      return `Feeling overwhelmed is hard. If it worsens, reach out: ${primaryContacts}\n\nConsider Mindfulness, ReFrame, or Balance Your Thinking. Want a 90-second walkthrough?`;
    }
    return `That sounds stressful. Consider Gratitude or Mindfulness to reset. I‚Äôm here to guide a quick exercise if you‚Äôd like.`;
  };

  const getAIResponse = async (userText: string): Promise<string> => {
    if (!selectedTrainer) return "Please select a coach to begin your training session.";

    const distress = detectDistressLevel(userText);
    if (distress === "critical") {
      setShowEmergencyAlert(true);
      return getDistressResponse(selectedTrainer, userText, "critical");
    }

    if (aiService) {
      try {
        const context = {
          userId: "demo-user",
          sessionId: "repair-kit",
          currentSkill: selectedSkillForPractice?.id,
          practiceMode: activeTab === "practice",
          recentMessages: messages.slice(-10).map((m) => ({
            id: m.id,
            type: m.type,
            content: m.content,
            timestamp: m.timestamp,
          })),
        } as const;

        // ‚úÖ No 'any' ‚Äî pass a properly typed history
        const history: Array<{ type: "user" | "assistant"; content: string }> = messages
          .slice(-10)
          .map((m) => ({
            type: m.type === "user" ? ("user" as const) : ("assistant" as const),
            content: m.content,
          }));

        const ai = await aiService.generateResponse(userText, context, history);
        if (ai?.requiresEscalation) setShowEmergencyAlert(true);
        if (distress !== "none" && ai?.content && !ai.content.toLowerCase().includes("skill")) {
          return getDistressResponse(selectedTrainer, userText, distress);
        }
        return ai?.content ?? getTrainerResponse(selectedTrainer, userText);
      } catch {
        // fall through to fallback below
      }
    }

    if (distress !== "none") return getDistressResponse(selectedTrainer, userText, distress);
    return getTrainerResponse(selectedTrainer, userText);
  };

  const handleTrainerSelect = (trainer: Trainer) => {
    setSelectedTrainer(trainer);
    setExpandedBioId(null);
    setMessages([]);
    setActiveTab("chat");
  };

  const handleSendMessage = async () => {
    const content = inputMessage.trim();
    if (!content) return;

    const userMsg: ChatMessage = {
      id: crypto.randomUUID(),
      type: "user",
      content,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMsg]);
    setInputMessage("");
    setIsLoading(true);

    const emergency = detectEmergencySignals(content);
    const distress = detectDistressLevel(content);
    if (emergency || distress === "critical") setShowEmergencyAlert(true);

    try {
      const reply = await getAIResponse(content);
      const botMsg: ChatMessage = {
        id: crypto.randomUUID(),
        type: "assistant",
        content: reply,
        timestamp: new Date(),
        trainerId: selectedTrainer?.id,
      };
      setMessages((prev) => [...prev, botMsg]);
    } catch {
      setMessages((prev) => [
        ...prev,
        {
          id: crypto.randomUUID(),
          type: "assistant",
          content:
            "I‚Äôm having trouble responding. Please try again‚Äîor reach out to emergency resources if you need urgent help.",
          timestamp: new Date(),
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const startPracticeSession = (skill: MentalArmorSkill) => {
    const session: PracticeSession = {
      id: crypto.randomUUID(),
      skillId: skill.id,
      skillTitle: skill.title,
      startTime: new Date(),
      completed: false,
      trainerId: selectedTrainer?.id,
    };
    setPracticeSessions((p) => [...p, session]);
    setSelectedSkillForPractice(skill);
    setActiveTab("practice");
  };

  const completePracticeSession = (sessionId: string, notes?: string) => {
    setPracticeSessions((prev) =>
      prev.map((s) => (s.id === sessionId ? { ...s, endTime: new Date(), notes, completed: true } : s))
    );
    setSelectedSkillForPractice(null);
  };

  return (
    <div className="space-y-6">
      {/* Disclaimer Modal */}
      {!disclaimerAccepted && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-3">Important Disclaimer</h2>
            <div className="space-y-3 text-sm text-gray-700">
              <p>
                This is a <strong>supporting application</strong> for the Mental Armor‚Ñ¢ curriculum by{" "}
                <strong>49 North (TechWerks, LLC)</strong>. It supplements but does not replace complete training.
              </p>
              <ul className="list-disc ml-5">
                <li>AI can misunderstand context and make mistakes.</li>
                <li>This is not clinical advice or therapy.</li>
                <li>Use it to learn and practice resilience skills.</li>
              </ul>
              <p className="text-red-700">If you are in crisis, call local emergency services. In the US dial 911 or 988.</p>
            </div>
            <div className="mt-4 flex gap-3">
              <button
                onClick={() => setDisclaimerAccepted(true)}
                className="flex-1 bg-brand-primary text-white px-4 py-2 rounded-lg hover:opacity-90"
              >
                I Understand ‚Äî Continue
              </button>
              <button
                onClick={() => window.location.reload()}
                className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Emergency Banner */}
      {showEmergencyAlert && (
        <div className="bg-blue-50 border-l-4 border-red-500 rounded-lg p-6 shadow-sm">
          <div className="flex items-start">
            <div className="text-red-600 text-2xl">ü§ù</div>
            <div className="ml-4 flex-1">
              <h3 className="text-lg font-semibold text-red-700 mb-1">You Have Value ‚Äî Help Is Available</h3>
              <p className="text-blue-800 mb-2">Being resilient includes reaching out for help when you need it most.</p>
              <div className="space-y-3">
                {DEFAULT_EMERGENCY_RESOURCES.map((r, i) => (
                  <div key={i} className="bg-white/80 rounded-lg p-3 border border-blue-200">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <p className="font-medium text-red-700">{r.name}</p>
                        <p className="text-blue-700 text-sm">{r.description}</p>
                        {r.available && <p className="text-blue-600 text-xs mt-1">{r.available}</p>}
                      </div>
                      <div className="ml-4 text-right">
                        {r.phone?.toLowerCase?.().includes("text") ? (
                          <a
                            href={`sms:${
                              r.phone.includes("741741")
                                ? "741741?body=HOME"
                                : r.phone.includes("686868")
                                ? "686868?body=CONNECT"
                                : r.phone.includes("85258")
                                ? "85258?body=SHOUT"
                                : ""
                            }`}
                            className="inline-block bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-700"
                          >
                            üì± {r.phone}
                          </a>
                        ) : (
                          <a
                            href={`tel:${r.phone.replace(/[^0-9]/g, "")}`}
                            className="inline-block bg-brand-primary text-white px-3 py-2 rounded-lg text-sm font-medium hover:opacity-90"
                          >
                            üìû Call {r.phone}
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 p-3 bg-green-50 rounded-lg border border-green-200">
                <p className="text-green-800 text-sm font-medium">üíö Your life matters. These feelings can change. Help is just a call or text away.</p>
              </div>
            </div>
            <button
              onClick={() => setShowEmergencyAlert(false)}
              className="ml-4 text-blue-500 hover:text-blue-700 text-xl"
              aria-label="Close emergency banner"
            >
              √ó
            </button>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="text-center">
        <h2 className="text-xl font-bold text-gray-900">Mental Armor‚Ñ¢ Maintenance & Repair Kit</h2>
        <p className="text-gray-700 mt-0.5">Practice your skills, get AI-powered training support, and access emergency resources</p>
        <div className="mt-2 text-xs text-gray-500 bg-gray-50 px-3 py-1 rounded-full inline-block">
          Supporting app for the complete Mental Armor‚Ñ¢ curriculum by 49 North
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {[
            { key: "coaches" as const, label: "Select Coach", icon: "üë•" },
            { key: "chat" as const, label: "Training Support", icon: "üí¨" },
            { key: "practice" as const, label: "Practice Sessions", icon: "üéØ" },
            { key: "resources" as const, label: "Emergency Resources", icon: "üÜò" },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.key
                  ? "border-brand-primary text-brand-primary"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Content */}
      <div className="bg-white rounded-lg shadow">
        {/* Coach selection */}
        {activeTab === "coaches" && (
          <div className="p-6 space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Choose Your Mental Armor‚Ñ¢ Coach</h3>
              <p className="text-gray-600">Each coach brings a unique style to support your resilience.</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {TRAINERS.map((t) => {
                const expanded = expandedBioId === t.id;
                return (
                  <div
                    key={t.id}
                    className={`border-2 rounded-lg p-5 min-h-[360px] flex flex-col transition-all hover:shadow-md ${
                      selectedTrainer?.id === t.id ? "border-brand-primary bg-blue-50" : "border-gray-200 hover:border-gray-300"
                    }`}
                  >
                    <div className="text-center">
                      <img src={t.image} alt={t.name} className="w-20 h-20 rounded-full mx-auto mb-3 object-cover" />
                      <h4 className="font-semibold text-gray-900 text-lg">{t.name}</h4>

                      <div className="mt-2 flex flex-wrap gap-1 justify-center">
                        {t.specialties.slice(0, 3).map((s) => (
                          <span key={s} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
                            {s}
                          </span>
                        ))}
                      </div>

                      {/* Bio with read more/less (no Tailwind plugin needed) */}
                      <div className="text-sm text-gray-600 mt-3 text-left">
                        <p className={expanded ? "" : "max-h-24 overflow-hidden"}>{t.bio}</p>
                        <button
                          onClick={() => setExpandedBioId(expanded ? null : t.id)}
                          className="mt-2 text-brand-primary text-xs font-medium hover:underline"
                        >
                          {expanded ? "Show less" : "Read more"}
                        </button>
                      </div>

                      {selectedTrainer?.id === t.id && (
                        <div className="mt-3 text-brand-primary font-medium text-sm">‚úì Selected Coach</div>
                      )}
                    </div>

                    <div className="mt-auto pt-4">
                      <button
                        onClick={() => {
                          setExpandedBioId(null);
                          handleTrainerSelect(t);
                        }}
                        className="w-full px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                      >
                        Start Training with {t.name}
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>

            {selectedTrainer && (
              <div className="border-t pt-6">
                <div className="bg-gray-50 rounded-lg p-4 flex items-start gap-4">
                  <img src={selectedTrainer.image} alt={selectedTrainer.name} className="w-12 h-12 rounded-full object-cover" />
                  <div className="flex-1">
                    <h4 className="font-semibold text-gray-900">{selectedTrainer.name}</h4>
                    <p className="text-sm text-gray-700 italic">
                      "
                      {selectedTrainer.voice.length > 150
                        ? selectedTrainer.voice.slice(0, 150) + "..."
                        : selectedTrainer.voice}
                      "
                    </p>
                    {/* full bio below the voice */}
                    <p className="text-sm text-gray-700 mt-2">{selectedTrainer.bio}</p>
                    <div className="mt-3">
                      <button
                        onClick={() => setActiveTab("chat")}
                        className="w-full sm:w-auto px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                      >
                        Start Training with {selectedTrainer.name}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Chat */}
        {activeTab === "chat" && (
          <div className="h-96 flex flex-col">
            {!selectedTrainer ? (
              <div className="flex-1 flex items-center justify-center p-8">
                <div className="text-center">
                  <div className="text-4xl mb-4">üë•</div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Select a Coach First</h3>
                  <p className="text-gray-600 mb-4">Choose your coach to begin your personalized training.</p>
                  <button
                    onClick={() => setActiveTab("coaches")}
                    className="px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                  >
                    Choose Your Coach
                  </button>
                </div>
              </div>
            ) : (
              <>
                <div className="border-b p-4 bg-gray-50 flex items-center gap-3">
                  <img src={selectedTrainer.image} alt={selectedTrainer.name} className="w-10 h-10 rounded-full object-cover" />
                  <div>
                    <h4 className="font-semibold text-gray-900">{selectedTrainer.name}</h4>
                    <p className="text-sm text-gray-600">Mental Armor‚Ñ¢ Coach</p>
                  </div>
                  <button onClick={() => setActiveTab("coaches")} className="ml-auto text-sm text-brand-primary hover:underline">
                    Change Coach
                  </button>
                </div>

                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((m) => (
                    <div key={m.id} className={`flex ${m.type === "user" ? "justify-end" : "justify-start"}`}>
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                          m.type === "user"
                            ? "bg-brand-primary text-white"
                            : m.isEmergencyAlert
                            ? "bg-red-100 text-red-800 border border-red-300"
                            : "bg-gray-100 text-gray-900"
                        }`}
                      >
                        <p className="text-sm whitespace-pre-wrap">{m.content}</p>
                        <p className={`text-xs mt-1 ${m.type === "user" ? "text-blue-200" : "text-gray-500"}`}>
                          {m.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="bg-gray-100 text-gray-900 px-4 py-2 rounded-lg">
                        <p className="text-sm">{selectedTrainer.name} is thinking...</p>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                <div className="border-t p-4">
                  <div className="flex space-x-2">
                    <textarea
                      ref={inputRef}
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === "Enter" && !e.shiftKey) {
                          e.preventDefault();
                          handleSendMessage();
                        }
                      }}
                      placeholder={`Share your thoughts with ${selectedTrainer.name}...`}
                      className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm resize-none"
                      rows={2}
                    />
                    <button
                      onClick={handleSendMessage}
                      disabled={!inputMessage.trim() || isLoading}
                      className="px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90 disabled:opacity-50"
                    >
                      Send
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">Try sharing a challenge or asking about a specific Mental Armor‚Ñ¢ skill.</p>
                </div>

                <div className="border-t bg-gray-50 p-3 text-xs text-gray-600 flex items-center gap-2">
                  <span className="text-yellow-600">‚ö†Ô∏è</span>
                  <p>AI coach helps you practice skills; it isn‚Äôt clinical care. Emergencies: 911/999 or 988 (US).</p>
                </div>
              </>
            )}
          </div>
        )}

        {/* Practice */}
        {activeTab === "practice" && (
          <div className="p-6">
            {selectedSkillForPractice ? (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">Practicing: {selectedSkillForPractice.title}</h3>
                  <button onClick={() => setSelectedSkillForPractice(null)} className="text-gray-500 hover:text-gray-700">
                    ‚úï End Session
                  </button>
                </div>

                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-2">Goal:</h4>
                  <p className="text-gray-700 mb-4">{selectedSkillForPractice.goal}</p>
                  <h4 className="font-medium text-gray-900 mb-2">Steps to Practice:</h4>
                  <ol className="list-decimal list-inside space-y-2 text-gray-700">
                    {selectedSkillForPractice.steps.map((s, i) => (
                      <li key={i} className="text-sm">
                        {s}
                      </li>
                    ))}
                  </ol>
                </div>

                <div className="border-t pt-4">
                  <button
                    onClick={() => {
                      const inProgress = practiceSessions.find((s) => !s.completed);
                      if (inProgress) completePracticeSession(inProgress.id, "Practice complete");
                    }}
                    className="w-full px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                  >
                    Complete Practice Session
                  </button>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-900">Start a Practice Session</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {MENTAL_ARMOR_SKILLS.slice(0, 6).map((skill) => (
                    <div key={skill.id} className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-2">{skill.title}</h4>
                      <p className="text-sm text-gray-600 mb-3 line-clamp-2">{skill.goal}</p>
                      <button
                        onClick={() => startPracticeSession(skill)}
                        className="w-full px-3 py-2 bg-brand-primary text-white rounded text-sm hover:opacity-90"
                      >
                        Start Practice
                      </button>
                    </div>
                  ))}
                </div>

                {practiceSessions.length > 0 && (
                  <div className="border-t pt-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Practice Sessions</h3>
                    <div className="space-y-3">
                      {practiceSessions
                        .slice(-5)
                        .reverse()
                        .map((s) => (
                          <div key={s.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div>
                              <p className="font-medium text-gray-900">{s.skillTitle}</p>
                              <p className="text-sm text-gray-600">
                                {s.startTime.toLocaleDateString()} at {s.startTime.toLocaleTimeString()}
                              </p>
                            </div>
                            <span
                              className={`px-2 py-1 rounded-full text-xs ${
                                s.completed ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"
                              }`}
                            >
                              {s.completed ? "Completed" : "In Progress"}
                            </span>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Resources */}
        {activeTab === "resources" && (
          <div className="p-6 space-y-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Crisis Support Resources</h3>
              <p className="text-gray-600">
                If you are experiencing a mental health emergency, please reach out for immediate support.
              </p>
            </div>

            {DEFAULT_EMERGENCY_RESOURCES.map((r, i) => {
              const isText = r.phone?.toLowerCase?.().includes("text");
              return (
                <div key={i} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">{r.name}</h4>
                      <p className="text-gray-600 text-sm mt-1">{r.description}</p>
                      {r.available && <p className="text-gray-500 text-xs mt-1">Available: {r.available}</p>}
                    </div>
                    <div className="ml-4 text-right">
                      {isText ? (
                        <a
                          href={`sms:${
                            r.phone.includes("741741")
                              ? "741741?body=HOME"
                              : r.phone.includes("686868")
                              ? "686868?body=CONNECT"
                              : r.phone.includes("85258")
                              ? "85258?body=SHOUT"
                              : ""
                          }`}
                          className="inline-block bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-700"
                        >
                          üì± {r.phone}
                        </a>
                      ) : (
                        <a
                          href={`tel:${r.phone.replace(/[^0-9]/g, "")}`}
                          className="inline-block bg-brand-primary text-white px-3 py-2 rounded-lg text-sm font-medium hover:opacity-90"
                        >
                          ÔøΩÔøΩ Call {r.phone}
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-1">Organization-Specific Resources</h4>
              <p className="text-blue-700 text-sm">
                Your organization may offer chaplains, peer support, or psychology services. Check with your supervisor or
                HR for options.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}



==== ./src/components/PracticeSession.tsx ====
// src/components/PracticeSession.tsx - Corrected version

import { useEffect, useMemo, useState } from "react";
import type { PracticeSessionData, SkillPractice, PracticeFormField } from "@/data/practices";
import { getPracticeBySkillId } from "@/data/practices";

type Props = {
  skillId: string;
  skillTitle: string;
  onComplete: (data: PracticeSessionData, durationMinutes: number) => void;
  onBack: () => void;
};

export default function PracticeSession({ skillId, skillTitle, onComplete, onBack }: Props) {
  const [practice, setPractice] = useState<SkillPractice | null>(null);
  const [formData, setFormData] = useState<PracticeSessionData>({});
  const [startTime] = useState<Date>(new Date());
  const [currentSection, setCurrentSection] = useState(0);
  const [showSummary, setShowSummary] = useState(false);

  useEffect(() => {
    const data = getPracticeBySkillId(skillId);
    setPractice(data ?? null);
    if (data) {
      const init: PracticeSessionData = {};
      for (const section of data.sections) {
        for (const field of section.fields) {
          init[field.id] = field.type === 'multiselect' ? [] : "";
        }
      }
      setFormData(init);
      setCurrentSection(0);
      setShowSummary(false);
    }
  }, [skillId]);

  const current = useMemo(() => (!practice ? null : practice.sections[currentSection]), [practice, currentSection]);

  const handleInput = (fieldId: string, value: string | string[]) => {
    setFormData((prev) => ({ ...prev, [fieldId]: value }));
  };

  // Enhanced field rendering for new types
  const renderField = (field: PracticeFormField) => {
    const commonInputClasses = "w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-transparent";

    switch (field.type) {
      case 'textarea':
        return (
          <textarea
            rows={field.rows || 4}
            value={formData[field.id] as string || ""}
            onChange={(e) => handleInput(field.id, e.target.value)}
            placeholder={field.placeholder}
            className={commonInputClasses}
            required={field.required}
          />
        );

      case 'select':
        return (
          <select
            value={formData[field.id] as string || ""}
            onChange={(e) => handleInput(field.id, e.target.value)}
            className={commonInputClasses}
            required={field.required}
          >
            <option value="" disabled>{field.placeholder || "Select an option..."}</option>
            {(field.options || []).map((option) => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );

      case 'scale': {
        const currentValue = formData[field.id] as string || field.min?.toString() || "1";
        return (
          <div className="space-y-3">
            <input
              type="range"
              min={field.min || 1}
              max={field.max || 10}
              step={field.step || 1}
              value={currentValue}
              onChange={(e) => handleInput(field.id, e.target.value)}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>{field.min || 1}</span>
              <span className="font-medium bg-brand-primary text-white px-2 py-1 rounded">
                {currentValue}
              </span>
              <span>{field.max || 10}</span>
            </div>
          </div>
        );
      }

      case 'multiselect': {
        const selectedValues = Array.isArray(formData[field.id]) ? 
          formData[field.id] as string[] : [];
        return (
          <div className="space-y-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg p-3">
            {(field.options || []).map((option) => (
              <label key={option} className="flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-1 rounded">
                <input
                  type="checkbox"
                  checked={selectedValues.includes(option)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      handleInput(field.id, [...selectedValues, option]);
                    } else {
                      handleInput(field.id, selectedValues.filter(item => item !== option));
                    }
                  }}
                  className="h-4 w-4 text-brand-primary border-gray-300 rounded focus:ring-brand-primary"
                />
                <span className="text-sm text-gray-700">{option}</span>
              </label>
            ))}
          </div>
        );
      }

      case 'checkbox':
        return (
          <label className="flex items-center space-x-2 cursor-pointer">
            <input
              type="checkbox"
              checked={!!(formData[field.id] as string)}
              onChange={(e) => handleInput(field.id, e.target.checked ? "true" : "")}
              className="h-4 w-4 text-brand-primary border-gray-300 rounded focus:ring-brand-primary"
            />
            <span className="text-sm text-gray-700">{field.placeholder}</span>
          </label>
        );

      case 'radio':
        return (
          <div className="space-y-2">
            {(field.options || []).map((option) => (
              <label key={option} className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name={field.id}
                  value={option}
                  checked={formData[field.id] === option}
                  onChange={(e) => handleInput(field.id, e.target.value)}
                  className="h-4 w-4 text-brand-primary border-gray-300 focus:ring-brand-primary"
                />
                <span className="text-sm text-gray-700">{option}</span>
              </label>
            ))}
          </div>
        );

      case 'text':
      default:
        return (
          <input
            type="text"
            value={formData[field.id] as string || ""}
            onChange={(e) => handleInput(field.id, e.target.value)}
            placeholder={field.placeholder}
            className={commonInputClasses}
            required={field.required}
          />
        );
    }
  };

  const next = () => {
    if (!practice) return;
    if (currentSection < practice.sections.length - 1) setCurrentSection((i) => i + 1);
    else setShowSummary(true);
  };

  const prev = () => { 
    if (currentSection > 0) setCurrentSection((i) => i - 1); 
    else onBack(); 
  };

  const complete = () => {
    const duration = Math.max(1, Math.round((Date.now() - startTime.getTime()) / 60000));
    onComplete(formData, duration);
  };

  // Enhanced summary function for Foundations of Resilience
  const foundationsSummary = useMemo(() => {
    if (!practice || skillId !== "foundations-resilience") return {};
    
    return {
      "Understanding & Definition": [
        formData["personal-definition"] && `Personal Definition: ${formData["personal-definition"]}`,
        formData["resilience-examples"] && `Examples Observed: ${formData["resilience-examples"]}`
      ].filter(Boolean),
      
      "Resilience Attributes": [
        formData["key-attributes"] && `Key Attributes: ${formData["key-attributes"]}`,
        formData["attribute-ranking"] && `Top 3 Priorities: ${formData["attribute-ranking"]}`
      ].filter(Boolean),
      
      "Historical Analysis": [
        formData["historical-figure"] && `Figure: ${formData["historical-figure"]}`,
        formData["figure-challenges"] && `Challenges: ${formData["figure-challenges"]}`,
        formData["figure-responses"] && `Responses: ${formData["figure-responses"]}`,
        formData["figure-growth"] && `Growth: ${formData["figure-growth"]}`
      ].filter(Boolean),
      
      "Personal Resilience": [
        formData["personal-challenge"] && `Challenge: ${formData["personal-challenge"]}`,
        formData["coping-strategies"] && `Strategies Used: ${formData["coping-strategies"]}`,
        formData["support-systems"] && `Support Systems: ${formData["support-systems"]}`,
        formData["lessons-learned"] && `Lessons: ${formData["lessons-learned"]}`
      ].filter(Boolean),
      
      "Current Assessment": [
        formData["current-strengths"] && `Strengths: ${formData["current-strengths"]}`,
        formData["growth-areas"] && `Growth Areas: ${formData["growth-areas"]}`,
        formData["resilience-rating"] && `Self-Rating: ${formData["resilience-rating"]}`
      ].filter(Boolean),
      
      "Action Plan": [
        formData["priority-skills"] && `Priority Skills: ${Array.isArray(formData["priority-skills"]) ? (formData["priority-skills"] as string[]).join(", ") : formData["priority-skills"]}`,
        formData["daily-practices"] && `Daily Practices: ${formData["daily-practices"]}`,
        formData["accountability"] && `Accountability: ${formData["accountability"]}`,
        formData["obstacle-planning"] && `Obstacle Planning: ${formData["obstacle-planning"]}`
      ].filter(Boolean)
    };
  }, [practice, formData, skillId]);

  if (!practice) {
    return (
      <div className="text-center py-10">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-brand-primary mx-auto mb-4"></div>
        <p className="text-gray-700">Loading practice session for "{skillTitle}"...</p>
      </div>
    );
  }

  if (showSummary) {
    return (
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="text-center border-b pb-4">
          <h2 className="text-2xl font-bold text-gray-900">{practice.title}</h2>
          <p className="text-gray-600 mt-2">Practice Session Summary</p>
        </div>

        <div className="bg-blue-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Your Resilience Foundation Work</h3>
          {Object.keys(foundationsSummary).length === 0 ? (
            <p className="text-sm text-blue-800">No entries completed yet. Use "Back to Practice" to fill in your responses.</p>
          ) : (
            <div className="space-y-6">
              {Object.entries(foundationsSummary).map(([category, items]) => 
                (items as string[]).length > 0 && (
                  <div key={category} className="bg-white rounded-lg p-4 shadow-sm">
                    <h4 className="font-semibold text-gray-900 mb-3 text-center border-b pb-2">{category}</h4>
                    <div className="space-y-3">
                      {(items as string[]).map((item: string, i: number) => (
                        <div key={`${category}-${i}`} className="text-sm text-gray-700 p-3 bg-gray-50 rounded border-l-2 border-blue-300">
                          {item}
                        </div>
                      ))}
                    </div>
                  </div>
                )
              )}
            </div>
          )}
        </div>

        <div className="flex justify-between items-center pt-4">
          <button 
            onClick={() => setShowSummary(false)} 
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            ‚Üê Back to Practice
          </button>
          <div className="space-x-3">
            <button 
              onClick={complete} 
              className="px-6 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90 transition-opacity"
            >
              Complete Practice
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Progress Header */}
      <div className="text-center border-b pb-6">
        <h2 className="text-2xl font-bold text-gray-900">{practice.title}</h2>
        {practice.description && <p className="text-gray-600 mt-2">{practice.description}</p>}
        
        {practice.totalTimeEstimate && (
          <p className="text-sm text-gray-500 mt-1">Estimated time: {practice.totalTimeEstimate}</p>
        )}
        
        {/* Progress Indicator */}
        <div className="mt-4 flex justify-center">
          <div className="flex space-x-2">
            {practice.sections.map((_, idx) => (
              <div 
                key={idx} 
                className={`w-3 h-3 rounded-full transition-colors ${
                  idx === currentSection 
                    ? "bg-brand-primary ring-2 ring-brand-primary ring-opacity-30" 
                    : idx < currentSection 
                    ? "bg-green-500" 
                    : "bg-gray-300"
                }`} 
              />
            ))}
          </div>
        </div>
        
        <p className="text-sm text-gray-500 mt-2">
          Step {currentSection + 1} of {practice.sections.length}
        </p>
      </div>

      {/* Current Section */}
      {current && (
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="mb-6">
            <h3 className="text-xl font-semibold text-gray-900 mb-2">{current.title}</h3>
            {current.description && (
              <p className="text-gray-600 bg-blue-50 p-4 rounded-lg border-l-4 border-blue-300">
                {current.description}
              </p>
            )}
            {current.timeEstimate && (
              <p className="text-xs text-gray-500 mt-2">Estimated time: {current.timeEstimate}</p>
            )}
          </div>

          <div className="space-y-6">
            {current.fields.map((field) => (
              <div key={field.id} className="space-y-2">
                <label className="block text-sm font-medium text-gray-700">
                  {field.label}
                  {field.required && <span className="text-red-500 ml-1">*</span>}
                </label>

                {renderField(field)}

                {field.helpText && (
                  <p className="text-xs text-gray-600 mt-1">{field.helpText}</p>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Navigation */}
      <div className="flex justify-between items-center pt-4">
        <button 
          onClick={prev} 
          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
        >
          {currentSection === 0 ? "‚Üê Back to Skill" : "‚Üê Previous"}
        </button>
        
        <button 
          onClick={next} 
          className="px-6 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90 transition-opacity"
        >
          {practice.sections && currentSection === practice.sections.length - 1 ? "View Summary ‚Üí" : "Next ‚Üí"}
        </button>
      </div>
    </div>
  );
}


==== ./src/components/SkillDetail.tsx ====
import type { MentalArmorSkill } from "@/types/emergency";
import { useState, useEffect } from "react";
import { practiceKitUtils } from "@/utils/practiceKit";

type Props = {
  skill: MentalArmorSkill;
  fromChat?: boolean;
  onBack: () => void;
  onStartPractice?: (skill: MentalArmorSkill) => void;
};

const domainLabel = {
  emotional: "Emotional",
  social: "Social",
  family: "Family",
  spiritual: "Spiritual",
};

const getModuleColor = (module: string) => {
  switch (module) {
    case "Foundation":
      return "bg-blue-100 text-blue-800 border-blue-200";
    case "Values & Meaning":
      return "bg-indigo-100 text-indigo-800 border-indigo-200";
    case "Resilient Thinking":
      return "bg-green-100 text-green-800 border-green-200";
    case "Social Resilience":
      return "bg-amber-100 text-amber-800 border-amber-200";
    default:
      return "bg-gray-100 text-gray-800 border-gray-200";
  }
};

export default function SkillDetail({ skill, fromChat = false, onBack, onStartPractice }: Props) {
  const [isInPracticeKit, setIsInPracticeKit] = useState(false);
  const [showAddedMessage, setShowAddedMessage] = useState(false);

  // Check if skill is in practice kit on mount and listen for updates
  useEffect(() => {
    setIsInPracticeKit(practiceKitUtils.isSkillInPracticeKit(skill.id));

    const handlePracticeKitUpdate = () => {
      setIsInPracticeKit(practiceKitUtils.isSkillInPracticeKit(skill.id));
    };

    window.addEventListener("practiceKitUpdated", handlePracticeKitUpdate);
    return () => {
      window.removeEventListener("practiceKitUpdated", handlePracticeKitUpdate);
    };
  }, [skill.id]);

  const handleAddToPracticeKit = () => {
    if (!isInPracticeKit) {
      practiceKitUtils.addSkillToPracticeKit(skill.id);
      setIsInPracticeKit(true);
      setShowAddedMessage(true);
      setTimeout(() => setShowAddedMessage(false), 3000);
    }
  };

  const handleStartPractice = () => {
    // Ensure it's in the Practice Kit
    if (!isInPracticeKit) {
      practiceKitUtils.addSkillToPracticeKit(skill.id);
      setIsInPracticeKit(true);
    }
    // Pass to parent if provided; otherwise hand off via localStorage
    if (onStartPractice) {
      onStartPractice(skill);
    } else {
      localStorage.setItem(
        "start-practice-skill",
        JSON.stringify({ id: skill.id, title: skill.title })
      );
      alert(
        `Practice session for "${skill.title}" is queued. Navigate to the Repair Kit to begin.`
      );
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* AI Coach Recommendation Banner */}
      {fromChat && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center gap-2 text-blue-800">
            <span className="text-lg">üí¨</span>
            <div>
              <p className="font-medium">Recommended by your AI Coach</p>
              <p className="text-sm text-blue-600">
                This skill was suggested based on your conversation in the Repair Kit.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Back Button */}
      <button
        onClick={onBack}
        className="flex items-center gap-2 text-brand-primary hover:opacity-80 font-medium transition-opacity"
        aria-label={fromChat ? "Back to Repair Kit Chat" : "Back to Go-Bag"}
      >
        <span>‚Üê</span>
        <span>{fromChat ? "Back to Chat" : "Back to Skills Go-Bag"}</span>
      </button>

      {/* Card */}
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        {/* Hero */}
        <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-8">
          <div className="flex flex-col lg:flex-row items-center gap-8">
            {/* Image */}
            <div className="flex-shrink-0">
              {skill.image ? (
                <div className="w-48 h-48 bg-white rounded-xl shadow-md flex items-center justify-center overflow-hidden">
                  <img
                    src={skill.image}
                    alt={skill.title}
                    className="w-full h-full object-contain p-4"
                  />
                </div>
              ) : (
                <div className="w-48 h-48 bg-white rounded-xl shadow-md flex items-center justify-center">
                  <div className="text-gray-400 text-center">
                    <div className="text-6xl mb-4">üéØ</div>
                    <span className="text-sm">Mental Armor Skill</span>
                  </div>
                </div>
              )}
            </div>

            {/* Header */}
            <div className="flex-1 text-center lg:text-left">
              <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                {skill.title}
              </h1>

              {/* Trainer */}
              <div className="flex items-center gap-3 mb-6 justify-center lg:justify-start">
                <img
                  src={`/trainers/${skill.trainer.toLowerCase()}.jpg`}
                  alt={skill.trainer}
                  className="h-12 w-12 rounded-full object-cover border-2 border-white shadow-sm"
                />
                <div>
                  <p className="text-lg font-medium text-gray-700">
                    Led by {skill.trainer}
                  </p>
                  <p className="text-sm text-gray-500">Mental Armor‚Ñ¢ Trainer</p>
                </div>
              </div>

              {/* Tags */}
              <div className="space-y-3">
                <div className="flex flex-wrap gap-2 justify-center lg:justify-start">
                  {skill.modules.map((m) => (
                    <span
                      key={m}
                      className={`px-4 py-2 rounded-full text-sm font-medium border ${getModuleColor(
                        m
                      )}`}
                    >
                      {m}
                    </span>
                  ))}
                </div>

                <div className="flex flex-wrap gap-2 justify-center lg:justify-start">
                  {skill.domains.map((d) => (
                    <span
                      key={`d-${d}`}
                      className="px-3 py-1 rounded-full bg-gray-200 text-gray-700 text-sm"
                    >
                      {domainLabel[d as keyof typeof domainLabel] ?? d} Domain
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-8 space-y-8">
          {/* Goal */}
          <section className="bg-blue-50 rounded-lg p-6 border-l-4 border-blue-500">
            <h2 className="text-xl font-bold text-blue-900 mb-3 flex items-center gap-2">
              <span>üéØ</span>
              <span>Goal</span>
            </h2>
            <p className="text-blue-800 text-lg leading-relaxed">{skill.goal}</p>
          </section>

          {/* When to Use */}
          <section className="bg-green-50 rounded-lg p-6 border-l-4 border-green-500">
            <h2 className="text-xl font-bold text-green-900 mb-3 flex items-center gap-2">
              <span>‚è∞</span>
              <span>When to Use</span>
            </h2>
            <p className="text-green-800 text-lg leading-relaxed">
              {skill.whenToUse}
            </p>
          </section>

          {/* Benefits */}
          <section className="bg-purple-50 rounded-lg p-6 border-l-4 border-purple-500">
            <h2 className="text-xl font-bold text-purple-900 mb-4 flex items-center gap-2">
              <span>‚ú®</span>
              <span>Scientific Benefits</span>
            </h2>
            <ul className="space-y-3">
              {skill.benefits.map((benefit, i) => (
                <li key={i} className="flex items-start gap-3 text-purple-800">
                  <span className="text-purple-600 mt-1 flex-shrink-0">‚Ä¢</span>
                  <span className="text-lg leading-relaxed">{benefit}</span>
                </li>
              ))}
            </ul>
          </section>

          {/* Steps */}
          <section className="bg-orange-50 rounded-lg p-6 border-l-4 border-orange-500">
            <h2 className="text-xl font-bold text-orange-900 mb-4 flex items-center gap-2">
              <span>üìã</span>
              <span>How to Practice (Step by Step)</span>
            </h2>
            <ol className="space-y-4">
              {skill.steps.map((step, i) => (
                <li key={i} className="flex items-start gap-4 text-orange-800">
                  <span className="bg-orange-500 text-white w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-1">
                    {i + 1}
                  </span>
                  <span className="text-lg leading-relaxed">{step}</span>
                </li>
              ))}
            </ol>
          </section>
        </div>

        {/* Actions */}
        <div className="bg-gray-50 p-6 border-t">
          {showAddedMessage && (
            <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center gap-2 text-green-800">
                <span>‚úì</span>
                <span className="text-sm font-medium">
                  Added to your Practice Kit!
                </span>
              </div>
            </div>
          )}

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={handleAddToPracticeKit}
              disabled={isInPracticeKit}
              className={`flex-1 max-w-sm py-3 px-6 rounded-lg font-medium transition-opacity flex items-center justify-center gap-2 ${
                isInPracticeKit
                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                  : "bg-brand-primary text-white hover:opacity-90"
              }`}
            >
              <span>{isInPracticeKit ? "‚úì" : "üéí"}</span>
              <span>
                {isInPracticeKit ? "In Practice Kit" : "Add to Practice Kit"}
              </span>
            </button>
            <button
              onClick={handleStartPractice}
              className="flex-1 max-w-sm bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center justify-center gap-2"
            >
              <span>üèÉ</span>
              <span>Start Practice Session</span>
            </button>
          </div>

          <p className="text-center text-gray-600 text-sm mt-4">
            Ready to build your mental armor? Add skills to your kit and practice
            regularly for best results.
          </p>
        </div>
      </div>

      {/* Special Call-to-Action for Chat-Recommended Skills */}
      {fromChat && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h3 className="font-semibold text-green-900 mb-2">Ready to Apply This Skill?</h3>
          <p className="text-green-800 text-sm mb-3">
            Your AI coach recommended this skill based on what you shared. Consider how you might use it in your current situation.
          </p>
          <div className="flex gap-3">
            <button
              onClick={handleStartPractice}
              className="px-4 py-2 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700"
            >
              Start Practice Now
            </button>
            <button
              onClick={onBack}
              className="px-4 py-2 border border-green-600 text-green-600 rounded-lg font-medium hover:bg-green-50"
            >
              Continue Chat
            </button>
          </div>
        </div>
      )}
    </div>
  );
}


==== ./src/components/GoBag.tsx ====
import { useMemo, useState } from "react";
import type { MentalArmorSkill, MentalArmorModule } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";

type Props = { onSelect?: (skill: MentalArmorSkill) => void };

const MODULES: MentalArmorModule[] = [
  "Foundation",
  "Values & Meaning",
  "Resilient Thinking",
  "Social Resilience",
];

const domainLabel: Record<string, string> = {
  emotional: "Emotional",
  social: "Social",
  family: "Family",
  spiritual: "Spiritual",
};

const moduleAccentByFirst = (modules: string[]) => {
  switch (modules[0]) {
    case "Foundation": return "border-t-4 border-blue-500";
    case "Values & Meaning": return "border-t-4 border-brand-primary";
    case "Resilient Thinking": return "border-t-4 border-green-500";
    case "Social Resilience": return "border-t-4 border-amber-500";
    default: return "border-t-4 border-gray-400";
  }
};

const getModuleColor = (module: string) => {
  switch (module) {
    case "Foundation": return "bg-blue-100 text-blue-800";
    case "Values & Meaning": return "bg-indigo-100 text-indigo-800";
    case "Resilient Thinking": return "bg-green-100 text-green-800";
    case "Social Resilience": return "bg-amber-100 text-amber-800";
    default: return "bg-gray-100 text-gray-800";
  }
};

export default function GoBag({ onSelect }: Props) {
  const [active, setActive] = useState<Set<MentalArmorModule>>(new Set());

  const toggle = (m: MentalArmorModule) => {
    setActive(prev => {
      const next = new Set(prev);
      if (next.has(m)) {
        next.delete(m);
      } else {
        next.add(m);
      }
      return next;
    });
  };

  const skills = useMemo(() => {
    if (active.size === 0) return MENTAL_ARMOR_SKILLS;
    return MENTAL_ARMOR_SKILLS.filter(s =>
      s.modules.some(m => active.has(m as MentalArmorModule))
    );
  }, [active]);

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900">Mental Armor‚Ñ¢ Skills Go-Bag</h2>
        <p className="text-gray-600 mt-2 text-lg">
          Your essential resilience gear. Equip and carry wherever you serve.
        </p>
      </div>

      {/* Filter bar */}
      <div className="flex flex-wrap items-center justify-center gap-3 bg-gray-50 p-4 rounded-lg">
        <span className="text-sm font-medium text-gray-700 mr-2">Filter by Module:</span>
        <button
          onClick={() => setActive(new Set())}
          className={`px-4 py-2 text-sm font-medium rounded-full border transition-all ${
            active.size === 0
              ? "bg-brand-primary text-white border-brand-primary shadow-md"
              : "border-gray-300 text-gray-700 hover:bg-white hover:shadow-sm"
          }`}
        >
          All Skills ({MENTAL_ARMOR_SKILLS.length})
        </button>
        {MODULES.map(m => (
          <button
            key={m}
            onClick={() => toggle(m)}
            className={`px-4 py-2 text-sm font-medium rounded-full border transition-all ${
              active.has(m)
                ? "bg-brand-primary text-white border-brand-primary shadow-md"
                : "border-gray-300 text-gray-700 hover:bg-white hover:shadow-sm"
            }`}
          >
            {m} ({MENTAL_ARMOR_SKILLS.filter(s => s.modules.includes(m)).length})
          </button>
        ))}
      </div>

      {/* Skills Grid */}
      <div className="grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
        {skills.map(skill => (
          <article
            key={skill.id}
            className={`bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-200 overflow-hidden flex flex-col h-full ${moduleAccentByFirst(
              skill.modules
            )}`}
          >
            {/* Skill Image */}
            <div className="aspect-video bg-gray-50 flex items-center justify-center overflow-hidden">
              {skill.image ? (
                <img
                  src={skill.image}
                  alt={skill.title}
                  className="w-full h-full object-contain p-4"
                  loading="lazy"
                />
              ) : (
                <div className="text-gray-400 text-center">
                  <div className="text-4xl mb-2">üéØ</div>
                  <span className="text-sm">Mental Armor Skill</span>
                </div>
              )}
            </div>

            <div className="p-6 flex flex-col flex-1">
              {/* Title */}
              <h3 className="text-xl font-bold text-gray-900 mb-2 leading-tight">
                {skill.title}
              </h3>

              {/* Trainer Info */}
              <div className="flex items-center gap-3 mb-4">
                <img
                  src={`/trainers/${skill.trainer.toLowerCase()}.jpg`}
                  alt={skill.trainer}
                  className="h-8 w-8 rounded-full object-cover"
                />
                <span className="text-sm font-medium text-gray-600">
                  Led by {skill.trainer}
                </span>
              </div>

              {/* Goal Description - Fixed height with line clamp */}
              <div className="mb-4 flex-1">
                <p className="text-gray-700 text-sm leading-relaxed line-clamp-4 h-20 overflow-hidden">
                  {skill.goal}
                </p>
              </div>

              {/* Module Tags */}
              <div className="flex flex-wrap gap-2 mb-3">
                {skill.modules.map(m => (
                  <span
                    key={`${skill.id}-m-${m}`}
                    className={`px-3 py-1 rounded-full text-xs font-medium ${getModuleColor(m)}`}
                  >
                    {m}
                  </span>
                ))}
              </div>

              {/* Domain Tags */}
              <div className="flex flex-wrap gap-2 mb-6">
                {skill.domains.map(d => (
                  <span
                    key={`${skill.id}-${d}`}
                    className="px-2 py-1 rounded bg-gray-100 text-gray-600 text-xs"
                  >
                    {domainLabel[d] ?? d}
                  </span>
                ))}
              </div>

              {/* Equip Button - Always at bottom */}
              <div className="mt-auto">
                <button
                  onClick={() => onSelect?.(skill)}
                  className="w-full bg-brand-primary text-white py-3 px-4 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center justify-center gap-2"
                >
                  <span>üéí</span>
                  <span>Equip this Skill</span>
                </button>
              </div>
            </div>
          </article>
        ))}
      </div>

      {/* Results Summary */}
      <div className="text-center text-gray-600">
        <p className="text-sm">
          Showing {skills.length} of {MENTAL_ARMOR_SKILLS.length} Mental Armor‚Ñ¢ skills
          {active.size > 0 && (
            <span> filtered by: {Array.from(active).join(", ")}</span>
          )}
        </p>
      </div>
    </div>
  );
}


==== ./src/components/RepairKit.tsx ====
// src/components/RepairKit.tsx
import { useState, useRef, useEffect } from "react";
import type { MentalArmorSkill, EmergencyResource } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";
import { TRAINERS, type Trainer } from "@/data/trainers";
import { createMentalArmorAI } from "@/services/improved-openai-integration";
import { type SkillSuggestion } from "@/services/enhanced-skill-suggestions";
import PracticeSession from "@/components/PracticeSession";
import { type PracticeSessionData } from "@/data/practices";
// Emergency resources and keywords - defined locally to avoid circular imports
const DEFAULT_EMERGENCY_RESOURCES: EmergencyResource[] = [
  {
    type: 'crisis',
    name: 'National Suicide Prevention Lifeline',
    phone: '988',
    available: '24/7',
    description: 'Free and confidential emotional support to people in suicidal crisis or emotional distress'
  },
  {
    type: 'crisis',
    name: 'Crisis Text Line',
    phone: 'Text HOME to 741741',
    available: '24/7',
    description: 'Free, 24/7 support for those in crisis. Text with a trained crisis counselor'
  },
  {
    type: 'crisis',
    name: 'Emergency Services',
    phone: '911',
    available: '24/7',
    description: 'Immediate emergency response for life-threatening situations'
  },
  {
    type: 'crisis',
    name: 'Canada Suicide Prevention Service',
    phone: '1-833-456-4566',
    available: '24/7',
    description: 'Canada-wide suicide prevention support'
  },
  {
    type: 'crisis',
    name: 'Samaritans',
    phone: '116 123',
    available: '24/7',
    description: 'Free emotional support for anyone in crisis'
  },
  {
    type: 'crisis',
    name: 'Emergency Services UK',
    phone: '999',
    available: '24/7',
    description: 'Emergency services for immediate danger'
  }
];

// CRITICAL Emergency Keywords - Enhanced Detection
const EMERGENCY_KEYWORDS = [
  // Weapons/Methods - CRITICAL
  'gun', 'weapon', 'knife', 'blade', 'pills', 'overdose', 'rope', 'noose',
  'poison', 'jump', 'bridge', 'cliff', 'train', 'traffic', 'car crash',
  'building', 'roof', 'hanging', 'suffocate', 'drown', 'gas',
  
  // Direct suicide language
  'suicide', 'kill myself', 'end it all', 'take my life', 'end my life', 
  'want to die', 'wish I was dead', 'better off dead', 'not worth living',
  
  // Self-harm with methods
  'hurt myself', 'self-harm', 'cut myself', 'harm myself', 'cutting',
  
  // Violence to others
  'hurt someone', 'kill someone', 'harm others', 'shoot someone',
  
  // Planning/immediacy
  'have a plan', 'going to do it', 'tonight', 'today', 'right now',
  'final decision', 'made up my mind', 'goodbye', 'this is it'
];

const CRISIS_KEYWORDS = {
  CRITICAL: [
    // Weapons/methods
    'gun', 'weapon', 'knife', 'blade', 'pills', 'overdose', 'rope', 'noose',
    'poison', 'jump off', 'bridge', 'cliff', 'hanging', 'suffocate',
    
    // Immediate suicide language
    'suicide', 'kill myself', 'end my life', 'take my life', 'want to die', 
    'end it all', 'better off dead', 'wish I was dead', 'not worth living',
    'going to do it', 'have a plan', 'tonight', 'today', 'right now',
    
    // Violence
    'hurt someone', 'kill someone', 'shoot someone', 'stab someone'
  ],
  HIGH: [
    'hopeless', 'worthless', 'no point living', 'give up', 'can\'t go on', 
    'meaningless', 'lost all hope', 'no way out', 'trapped forever',
    'nothing left', 'burden to everyone', 'everyone better without me'
  ],
  MEDIUM: [
    // Only truly overwhelming situations, not regular anxiety
    'falling apart', 'breaking down', 'can\'t cope', 'losing it', 
    'at my limit', 'spiraling', 'out of control', 'mental breakdown',
    'can\'t handle anymore', 'completely overwhelmed', 'drowning in'
  ],
  LOW: [
    // Regular stress/anxiety should be here
    'stressed', 'anxious', 'worried', 'tired', 'exhausted', 'struggling',
    'difficult', 'tough time', 'frustrated', 'upset', 'sad', 'anxiety',
    'nervous', 'tense', 'overwhelmed', 'high anxiety', 'panic', 'stress'
  ]
};

const openAIApiKey = import.meta.env.VITE_OPENAI_API_KEY as string | undefined;
const aiService = createMentalArmorAI(openAIApiKey);

type ChatKind = "user" | "assistant" | "system";
type Distress = "none" | "low" | "medium" | "high" | "critical";

interface ChatMessage {
  id: string;
  type: ChatKind;
  content: string;
  timestamp: Date;
  isEmergencyAlert?: boolean;
  trainerId?: string;
  suggestedSkills?: SkillSuggestion[];
  suggestionMethod?: 'curriculum' | 'ai-validated' | 'fallback';
}

interface PracticeSession {
  id: string;
  skillId: string;
  skillTitle: string;
  startTime: Date;
  endTime?: Date;
  notes?: string;
  completed: boolean;
  trainerId?: string;
}

// Navigation function types are defined inline where needed

export default function RepairKit() {
  const [activeTab, setActiveTab] = useState<"chat" | "practice" | "resources" | "coaches">("coaches");
  const [selectedTrainer, setSelectedTrainer] = useState<Trainer | null>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showEmergencyAlert, setShowEmergencyAlert] = useState(false);
  const [practiceSessions, setPracticeSessions] = useState<PracticeSession[]>([]);
  const [selectedSkillForPractice, setSelectedSkillForPractice] = useState<MentalArmorSkill | null>(null);
  const [disclaimerAccepted, setDisclaimerAccepted] = useState(false);
  const [expandedBioId, setExpandedBioId] = useState<string | null>(null);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Auto-scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Welcome message when trainer selected
  useEffect(() => {
    if (selectedTrainer && messages.length === 0) {
      setMessages([
        {
          id: crypto.randomUUID(),
          type: "assistant",
          content: getTrainerWelcomeMessage(selectedTrainer),
          timestamp: new Date(),
          trainerId: selectedTrainer.id,
        },
      ]);
    }
  }, [selectedTrainer, messages.length]);

  // Handle practice session handoff
  useEffect(() => {
    const raw = localStorage.getItem("start-practice-skill");
    if (!raw) return;
    
    try {
      const { id } = JSON.parse(raw);
      const found = MENTAL_ARMOR_SKILLS.find((s) => s.id === id);
      if (found) {
        const session: PracticeSession = {
          id: crypto.randomUUID(),
          skillId: found.id,
          skillTitle: found.title,
          startTime: new Date(),
          completed: false,
          trainerId: selectedTrainer?.id,
        };
        setPracticeSessions((p) => [...p, session]);
        setSelectedSkillForPractice(found);
        setActiveTab("practice");
      }
    } catch {
      // Ignore JSON errors
    } finally {
      localStorage.removeItem("start-practice-skill");
    }
  }, [selectedTrainer?.id]);

  // Enhanced Detection Functions
  const detectDistressLevel = (text: string): Distress => {
    const t = text.toLowerCase();
    
    if (CRISIS_KEYWORDS.CRITICAL.some((k: string) => t.includes(k.toLowerCase()))) return "critical";
    if (CRISIS_KEYWORDS.HIGH.some((k: string) => t.includes(k.toLowerCase()))) return "high";
    if (CRISIS_KEYWORDS.MEDIUM.some((k: string) => t.includes(k.toLowerCase()))) return "medium";
    if (CRISIS_KEYWORDS.LOW.some((k: string) => t.includes(k.toLowerCase()))) return "low";
    return "none";
  };

  const detectEmergencySignals = (text: string): boolean => {
    const t = text.toLowerCase();
    
    // Primary emergency detection
    const hasEmergency = EMERGENCY_KEYWORDS.some((k: string) => t.includes(k.toLowerCase()));
    const hasCritical = CRISIS_KEYWORDS.CRITICAL.some((k: string) => t.includes(k.toLowerCase()));
    
    // Enhanced phrase detection for context
    const emergencyPhrases = [
      'have a gun', 'got a weapon', 'holding a knife', 'pills ready',
      'standing on', 'ready to jump', 'tied the rope', 'wrote goodbye',
      'final decision', 'going to do it', 'tonight\'s the night',
      'this is it', 'time to go', 'can\'t take another day'
    ];
    
    const hasEmergencyPhrase = emergencyPhrases.some(phrase => t.includes(phrase));
    
    return hasEmergency || hasCritical || hasEmergencyPhrase;
  };

  const getTrainerWelcomeMessage = (trainer: Trainer): string => {
    switch (trainer.id) {
      case "scotty":
        return `Well hello there, friend! I'm Scotty. Building resilience is like tending a garden‚Äîpatience, care, and a little faith. What's on your mind today?`;
      case "rhonda":
        return `I'm BG Rhonda Cornum. We're here to build your mental armor‚Äîno excuses, no shortcuts. What challenge are you facing today?`;
      case "jill":
        return `Hi, I'm Dr. Jill. Let's explore your resilience journey with insight and practical tools. What would you like to work on today?`;
      case "terry":
        return `Hey‚ÄîTerry here. Life's got a sense of humor. We'll build strength through it. What's going on in your world?`;
      case "aj":
        return `Hi! I'm AJ. Love helping people discover strengths. What goal are you excited to tackle?`;
      case "chris":
        return `I'm Chris‚ÄîFirst Sergeant, dad, and growth nerd. True strength comes from hard moments. What's weighing on your mind?`;
      default:
        return `Hello! I'm ${trainer.name}, your Mental Armor‚Ñ¢ Coach. How can I support your training today?`;
    }
  };

  const getDistressResponse = (trainer: Trainer, _userMessage: string, level: Exclude<Distress, "none">): string => {
    const primaryContacts = "US: 988 | Canada: 1-833-456-4566 | UK: 116 123 | Emergency: 911/999";
    const fullContacts = `üá∫üá∏ United States:
‚Ä¢ Suicide & Crisis Lifeline: 988 (24/7)
‚Ä¢ Crisis Text Line: Text HOME to 741741 (24/7)
‚Ä¢ Emergency: 911

üá®üá¶ Canada:
‚Ä¢ Canada Suicide Prevention Service: 1-833-456-4566 (24/7)
‚Ä¢ Crisis Text Line: Text CONNECT to 686868 (24/7)
‚Ä¢ Emergency: 911

üá¨üáß United Kingdom:
‚Ä¢ Samaritans: 116 123 (24/7)
‚Ä¢ Crisis Text Line: Text SHOUT to 85258 (24/7)
‚Ä¢ Emergency: 999`;

    if (level === "critical") {
      return `I'm very concerned about your safety. Please reach out immediately:\n\n${fullContacts}\n\nYour life has value. We can pause practice and focus on safety first.`;
    }
    if (level === "high") {
      return `I hear you're in real pain. If you need immediate help: ${primaryContacts}\n\nWe can anchor to meaning‚Äîtry Values-Based Living, Spiritual Resilience, or What's Most Important. Which fits right now?`;
    }
    if (level === "medium") {
      return `That sounds really challenging. Mental Armor‚Ñ¢ skills can help with this. If things feel unmanageable, remember: ${primaryContacts}\n\nLet's focus on what might help right now.`;
    }
    // LOW level - much more supportive
    return `That sounds stressful, and anxiety about job security is really common. If it ever becomes overwhelming, support is available: ${primaryContacts}\n\nLet's work on some skills that can help with these feelings.`;
  };

  const handleTrainerSelect = (trainer: Trainer) => {
    setSelectedTrainer(trainer);
    setExpandedBioId(null);
    setMessages([]);
    setActiveTab("chat");
  };

  const handleSendMessage = async () => {
    const content = inputMessage.trim();
    if (!content || !selectedTrainer) return;

    const userMsg: ChatMessage = {
      id: crypto.randomUUID(),
      type: "user",
      content,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMsg]);
    setInputMessage("");
    setIsLoading(true);

    const emergency = detectEmergencySignals(content);
    const distress = detectDistressLevel(content);
    if (emergency || distress === "critical") {
      setShowEmergencyAlert(true);
    }

    try {
      // Get AI response and skill suggestions from the SAME source
      const history = messages.map(m => ({
        role: m.type as "user" | "assistant",
        content: m.content
      }));

      const aiResponse = await aiService.send(content, history);
      
      // Use the SAME skill suggestions for both AI response and cards
      let finalContent = aiResponse.text;
      const skillSuggestions = aiResponse.suggestedSkills || [];
      
      // If distress detected, override with distress response but keep skill suggestions
      if (distress !== "none") {
        finalContent = getDistressResponse(selectedTrainer, content, distress);
        
        // For low/medium distress, append skill suggestions to the response
        if ((distress === "low" || distress === "medium") && skillSuggestions.length > 0) {
          const skillNames = skillSuggestions.map(s => s.skill.title).join(", ");
          finalContent += `\n\nConsider trying: ${skillNames}. Would you like to explore any of these?`;
        }
      }

      const botMsg: ChatMessage = {
        id: crypto.randomUUID(),
        type: "assistant",
        content: finalContent,
        timestamp: new Date(),
        trainerId: selectedTrainer.id,
        suggestedSkills: skillSuggestions, // Use the SAME suggestions
        suggestionMethod: aiResponse.suggestionMethod,
      };

      setMessages((prev) => [...prev, botMsg]);

    } catch (error) {
      console.error('Chat error:', error);
      const errorMsg: ChatMessage = {
        id: crypto.randomUUID(),
        type: "assistant",
        content: "I'm having trouble responding right now. Please try again, or reach out to emergency resources if you need urgent help.",
        timestamp: new Date(),
        trainerId: selectedTrainer.id,
      };
      setMessages((prev) => [...prev, errorMsg]);
    } finally {
      setIsLoading(false);
    }
  };

  const startPracticeSession = (skill: MentalArmorSkill) => {
    const session: PracticeSession = {
      id: crypto.randomUUID(),
      skillId: skill.id,
      skillTitle: skill.title,
      startTime: new Date(),
      completed: false,
      trainerId: selectedTrainer?.id,
    };
    setPracticeSessions((p) => [...p, session]);
    setSelectedSkillForPractice(skill);
    setActiveTab("practice");
  };

  const completePracticeSession = (sessionId: string, notes?: string) => {
    setPracticeSessions((prev) =>
      prev.map((s) => (s.id === sessionId ? { ...s, endTime: new Date(), notes, completed: true } : s))
    );
    setSelectedSkillForPractice(null);
  };

  // Helper function for direct skill responses
  const getDirectSkillResponse = (skillId: string, coach?: Trainer): string => {
    const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
    if (!skill) return "";

    // Add coach-specific adlib before skill content
    let response = "";
    
    if (coach?.name) {
      switch (coach.name.toLowerCase()) {
        case 'rhonda':
          response += "That's exactly what we need to address. ";
          break;
        case 'scotty':
          response += "I'm glad you're interested in this, friend. ";
          break;
        case 'terry':
          response += "Good choice - this one really works when you work it. ";
          break;
        case 'aj':
          response += "Perfect! This skill aligns with your strengths. ";
          break;
        case 'chris':
          response += "Smart thinking. This skill builds real strength. ";
          break;
        case 'jill':
          response += "This is a valuable skill for your development. ";
          break;
        default:
          response += "Let me tell you about this skill. ";
      }
    }

    response += `**${skill.title}** ${skill.goal}

**When to use:** ${skill.whenToUse}

**Steps to practice:**`;

    skill.steps.forEach((step, index) => {
      response += `\n${index + 1}. ${step}`;
    });

    // Add scientific benefits if available
    if (skill.benefits && skill.benefits.length > 0) {
      response += `\n\n**Scientific benefits:**`;
      skill.benefits.slice(0, 3).forEach(benefit => {
        response += `\n‚Ä¢ ${benefit}`;
      });
    }

    // Add coach-specific encouragement
    if (coach?.name) {
      switch (coach.name.toLowerCase()) {
        case 'rhonda':
          response += "\n\nThis skill works if you work it. What's your next move?";
          break;
        case 'scotty':
          response += "\n\nTake this one step at a time, with patience and care.";
          break;
        case 'terry':
          response += "\n\nThis works in the real world when you practice it consistently.";
          break;
        case 'aj':
          response += "\n\nThis builds on strengths you already have. What do you notice you do well?";
          break;
        case 'chris':
          response += "\n\nGrowth comes through practicing these steps. What's the deeper challenge here?";
          break;
        case 'jill':
          response += "\n\nThis connects to your psychological well-being. How does this resonate with you?";
          break;
        default:
          response += "\n\nReady to practice this skill?";
      }
    }

    return response;
  };

  // Handle skill suggestion click
  const handleSkillSuggestionClick = (suggestion: SkillSuggestion) => {
    // Generate coach-specific response with adlib
    const explanationContent = getDirectSkillResponse(suggestion.skillId, selectedTrainer || undefined);
    
    const explanationMsg: ChatMessage = {
      id: crypto.randomUUID(),
      type: "assistant",
      content: explanationContent,
      timestamp: new Date(),
      trainerId: selectedTrainer?.id,
      // Don't include skill suggestions in the explanation message to avoid duplication
      suggestedSkills: [],
      suggestionMethod: 'curriculum',
    };
    
    setMessages((prev) => [...prev, explanationMsg]);

    // Optionally start practice session
    startPracticeSession(suggestion.skill);
  };

  // Helper function to handle navigation to Go-Bag (properly typed)
  const handleNavigateToGoBag = (skillId: string) => {
    // Check if parent app provides navigation function
    if ('navigateToGoBag' in window && typeof window.navigateToGoBag === 'function') {
      (window.navigateToGoBag as (skillId: string) => void)(skillId);
    } else {
      // Fallback - store for later navigation
      localStorage.setItem('pending-skill-navigation', skillId);
      const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
      alert(`Navigate to Go-Bag to view ${skill?.title || 'this skill'} details`);
    }
  };

  return (
    <div className="space-y-6">
      {/* Disclaimer Modal */}
      {!disclaimerAccepted && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-3">Important Disclaimer</h2>
            <div className="space-y-3 text-sm text-gray-700">
              <p>
                This is a <strong>supporting application</strong> for the Mental Armor‚Ñ¢ curriculum by{" "}
                <strong>49 North (TechWerks, LLC)</strong>. It supplements but does not replace complete training.
              </p>
              <ul className="list-disc ml-5">
                <li>AI responses are limited to curriculum content for accuracy</li>
                <li>Skill suggestions use validated Mental Armor‚Ñ¢ concepts only</li>
                <li>This is not clinical advice or therapy</li>
                <li>Use it to learn and practice established resilience skills</li>
              </ul>
              <p className="text-red-700">If you are in crisis, call local emergency services. In the US dial 911 or 988.</p>
            </div>
            <div className="mt-4 flex gap-3">
              <button
                onClick={() => setDisclaimerAccepted(true)}
                className="flex-1 bg-brand-primary text-white px-4 py-2 rounded-lg hover:opacity-90"
              >
                I Understand ‚Äî Continue
              </button>
              <button
                onClick={() => window.location.reload()}
                className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Emergency Banner */}
      {showEmergencyAlert && (
        <div className="bg-blue-50 border-l-4 border-red-500 rounded-lg p-6 shadow-sm">
          <div className="flex items-start">
            <div className="text-red-600 text-2xl">ü§ù</div>
            <div className="ml-4 flex-1">
              <h3 className="text-lg font-semibold text-red-700 mb-1">You Have Value ‚Äî Help Is Available</h3>
              <p className="text-blue-800 mb-2">Being resilient includes reaching out for help when you need it most.</p>
              <div className="space-y-3">
                {DEFAULT_EMERGENCY_RESOURCES.slice(0, 4).map((r: EmergencyResource, i: number) => (
                  <div key={i} className="bg-white/80 rounded-lg p-3 border border-blue-200">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <p className="font-medium text-red-700">{r.name}</p>
                        <p className="text-blue-700 text-sm">{r.description}</p>
                        {r.available && <p className="text-blue-600 text-xs mt-1">{r.available}</p>}
                      </div>
                      <div className="ml-4 text-right">
                        {r.phone?.toLowerCase?.().includes("text") ? (
                          <a
                            href={`sms:${
                              r.phone.includes("741741")
                                ? "741741?body=HOME"
                                : r.phone.includes("686868")
                                ? "686868?body=CONNECT"
                                : r.phone.includes("85258")
                                ? "85258?body=SHOUT"
                                : ""
                            }`}
                            className="inline-block bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-700"
                          >
                            üì± {r.phone}
                          </a>
                        ) : (
                          <a
                            href={`tel:${r.phone.replace(/[^0-9]/g, "")}`}
                            className="inline-block bg-brand-primary text-white px-3 py-2 rounded-lg text-sm font-medium hover:opacity-90"
                          >
                            üìû Call {r.phone}
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 p-3 bg-green-50 rounded-lg border border-green-200">
                <p className="text-green-800 text-sm font-medium">üíö Your life matters. These feelings can change. Help is just a call or text away.</p>
              </div>
            </div>
            <button
              onClick={() => setShowEmergencyAlert(false)}
              className="ml-4 text-blue-500 hover:text-blue-700 text-xl"
              aria-label="Close emergency banner"
            >
              √ó
            </button>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="text-center">
        <h2 className="text-xl font-bold text-gray-900">Mental Armor‚Ñ¢ Maintenance & Repair Kit</h2>
        <p className="text-gray-700 mt-0.5">Practice your skills, get curriculum-based training support, and access emergency resources</p>
        <div className="mt-2 text-xs text-gray-500 bg-gray-50 px-3 py-1 rounded-full inline-block">
          Enhanced with curriculum-first AI ‚Ä¢ Supporting app for Mental Armor‚Ñ¢ by 49 North
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {[
            { key: "coaches" as const, label: "Select Coach", icon: "üë•" },
            { key: "chat" as const, label: "Training Support", icon: "üí¨" },
            { key: "practice" as const, label: "Practice Sessions", icon: "üéØ" },
            { key: "resources" as const, label: "Emergency Resources", icon: "üÜò" },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.key
                  ? "border-brand-primary text-brand-primary"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Content */}
      <div className="bg-white rounded-lg shadow">
        {/* Coach selection */}
        {activeTab === "coaches" && (
          <div className="p-6 space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Choose Your Mental Armor‚Ñ¢ Coach</h3>
              <p className="text-gray-600">Each coach brings a unique style to support your resilience.</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {TRAINERS.map((t) => {
                const expanded = expandedBioId === t.id;
                return (
                  <div
                    key={t.id}
                    className={`border-2 rounded-lg p-5 min-h-[360px] flex flex-col transition-all hover:shadow-md ${
                      selectedTrainer?.id === t.id ? "border-brand-primary bg-blue-50" : "border-gray-200 hover:border-gray-300"
                    }`}
                  >
                    <div className="text-center">
                      <img src={t.image} alt={t.name} className="w-20 h-20 rounded-full mx-auto mb-3 object-cover" />
                      <h4 className="font-semibold text-gray-900 text-lg">{t.name}</h4>

                      <div className="mt-2 flex flex-wrap gap-1 justify-center">
                        {t.specialties.slice(0, 3).map((s) => (
                          <span key={s} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
                            {s}
                          </span>
                        ))}
                      </div>

                      <div className="text-sm text-gray-600 mt-3 text-left">
                        <p className={expanded ? "" : "max-h-24 overflow-hidden"}>{t.bio}</p>
                        <button
                          onClick={() => setExpandedBioId(expanded ? null : t.id)}
                          className="mt-2 text-brand-primary text-xs font-medium hover:underline"
                        >
                          {expanded ? "Show less" : "Read more"}
                        </button>
                      </div>

                      {selectedTrainer?.id === t.id && (
                        <div className="mt-3 text-brand-primary font-medium text-sm">‚úì Selected Coach</div>
                      )}
                    </div>

                    <div className="mt-auto pt-4">
                      <button
                        onClick={() => handleTrainerSelect(t)}
                        className="w-full px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                      >
                        Start Training with {t.name}
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Chat */}
        {activeTab === "chat" && (
          <div className="h-96 flex flex-col">
            {!selectedTrainer ? (
              <div className="flex-1 flex items-center justify-center p-8">
                <div className="text-center">
                  <div className="text-4xl mb-4">üë•</div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Select a Coach First</h3>
                  <p className="text-gray-600 mb-4">Choose your coach to begin curriculum-based training.</p>
                  <button
                    onClick={() => setActiveTab("coaches")}
                    className="px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                  >
                    Choose Your Coach
                  </button>
                </div>
              </div>
            ) : (
              <>
                <div className="border-b p-4 bg-gray-50 flex items-center gap-3">
                  <img src={selectedTrainer.image} alt={selectedTrainer.name} className="w-10 h-10 rounded-full object-cover" />
                  <div>
                    <h4 className="font-semibold text-gray-900">{selectedTrainer.name}</h4>
                    <p className="text-sm text-gray-600">Mental Armor‚Ñ¢ Coach</p>
                  </div>
                  <button onClick={() => setActiveTab("coaches")} className="ml-auto text-sm text-brand-primary hover:underline">
                    Change Coach
                  </button>
                </div>

                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((m) => (
                    <div key={m.id} className="space-y-2">
                      <div className={`flex ${m.type === "user" ? "justify-end" : "justify-start"}`}>
                        <div
                          className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            m.type === "user"
                              ? "bg-brand-primary text-white"
                              : m.isEmergencyAlert
                              ? "bg-red-100 text-red-800 border border-red-300"
                              : "bg-gray-100 text-gray-900"
                          }`}
                        >
                          <p className="text-sm whitespace-pre-wrap">{m.content}</p>
                          <p className={`text-xs mt-1 ${m.type === "user" ? "text-blue-200" : "text-gray-500"}`}>
                            {m.timestamp.toLocaleTimeString()}
                          </p>
                        </div>
                      </div>

                      {/* Enhanced Skill Suggestions with Go-Bag Navigation */}
                      {m.suggestedSkills && m.suggestedSkills.length > 0 && (
                        <div className="ml-4 space-y-3">
                          <p className="text-xs text-gray-600 flex items-center gap-1">
                            <span>üí°</span>
                            <span>
                              Mental Armor‚Ñ¢ skills that might help 
                              {m.suggestionMethod === 'curriculum' && " (curriculum-matched)"}:
                            </span>
                          </p>
                          <div className="space-y-2">
                            {m.suggestedSkills.map((suggestion) => (
                              <div key={suggestion.skillId} className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                                {/* Skill Title and Confidence */}
                                <div className="flex items-center justify-between mb-2">
                                  <h4 className="font-medium text-blue-900">{suggestion.skill.title}</h4>
                                  <div className="text-xs text-blue-600">
                                    {suggestion.confidence > 0.7 ? "üéØ" : suggestion.confidence > 0.5 ? "üëç" : "üí≠"}
                                  </div>
                                </div>
                                
                                {/* Brief Description */}
                                <p className="text-sm text-blue-800 mb-3 line-clamp-2">
                                  {suggestion.curriculumQuote || suggestion.skill.goal}
                                </p>
                                
                                {/* Action Buttons */}
                                <div className="flex gap-2">
                                  <button
                                    onClick={() => handleSkillSuggestionClick(suggestion)}
                                    className="flex-1 px-3 py-2 bg-blue-600 text-white rounded text-sm font-medium hover:bg-blue-700 transition-colors"
                                  >
                                    Learn & Practice
                                  </button>
                                  <button
                                    onClick={() => handleNavigateToGoBag(suggestion.skillId)}
                                    className="px-3 py-2 border border-blue-600 text-blue-600 rounded text-sm font-medium hover:bg-blue-50 transition-colors"
                                  >
                                    Go to Skill ‚Üí
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="bg-gray-100 text-gray-900 px-4 py-2 rounded-lg">
                        <p className="text-sm">{selectedTrainer.name} is thinking...</p>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                <div className="border-t p-4">
                  <div className="flex space-x-2">
                    <textarea
                      ref={inputRef}
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === "Enter" && !e.shiftKey) {
                          e.preventDefault();
                          handleSendMessage();
                        }
                      }}
                      placeholder={`Share your thoughts with ${selectedTrainer.name}...`}
                      className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm resize-none"
                      rows={2}
                    />
                    <button
                      onClick={handleSendMessage}
                      disabled={!inputMessage.trim() || isLoading}
                      className="px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90 disabled:opacity-50"
                    >
                      Send
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    AI responses use only Mental Armor‚Ñ¢ curriculum content. Skill suggestions are curriculum-validated.
                  </p>
                </div>

                <div className="border-t bg-gray-50 p-3 text-xs text-gray-600 flex items-center gap-2">
                  <span className="text-green-600">‚úì</span>
                  <p>Enhanced with curriculum controls ‚Ä¢ Emergencies: 911/999 or 988 (US)</p>
                </div>
              </>
            )}
          </div>
        )}

        {/* Practice Sessions */}
        {activeTab === "practice" && (
          <div className="p-6">
            {selectedSkillForPractice ? (
              <div className="space-y-6">
                {/* Check if this skill has a practice session available */}
                {selectedSkillForPractice.id === "foundations-resilience" ? (
                  <PracticeSession
                    skillId={selectedSkillForPractice.id}
                    skillTitle={selectedSkillForPractice.title}
                    onComplete={(data: PracticeSessionData, durationMinutes: number) => {
                      // Handle practice completion
                      const inProgress = practiceSessions.find((s) => !s.completed);
                      if (inProgress) {
                        completePracticeSession(inProgress.id, `Practice completed in ${durationMinutes} minutes`);
                      }
                    }}
                    onBack={() => setSelectedSkillForPractice(null)}
                  />
                ) : (
                  /* Fallback for skills without practice sessions */
                  <div className="space-y-6">
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold">Practicing: {selectedSkillForPractice.title}</h3>
                      <button onClick={() => setSelectedSkillForPractice(null)} className="text-gray-500 hover:text-gray-700">
                        ‚úï End Session
                      </button>
                    </div>

                    <div className="bg-gray-50 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-2">Goal:</h4>
                      <p className="text-gray-700 mb-4">{selectedSkillForPractice.goal}</p>
                      <h4 className="font-medium text-gray-900 mb-2">When to Use:</h4>
                      <p className="text-gray-700 mb-4">{selectedSkillForPractice.whenToUse}</p>
                      <h4 className="font-medium text-gray-900 mb-2">Steps to Practice:</h4>
                      <ol className="list-decimal list-inside space-y-2 text-gray-700">
                        {selectedSkillForPractice.steps.map((s, i) => (
                          <li key={i} className="text-sm">
                            {s}
                          </li>
                        ))}
                      </ol>
                    </div>

                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <p className="text-yellow-800 text-sm">
                        Interactive practice session for this skill is coming soon. For now, you can review the steps above and practice on your own.
                      </p>
                    </div>

                    <div className="border-t pt-4">
                      <button
                        onClick={() => {
                          const inProgress = practiceSessions.find((s) => !s.completed);
                          if (inProgress) completePracticeSession(inProgress.id, "Practice complete");
                        }}
                        className="w-full px-4 py-2 bg-brand-primary text-white rounded-lg hover:opacity-90"
                      >
                        Mark Practice as Complete
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-900">Start a Practice Session</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {MENTAL_ARMOR_SKILLS.slice(0, 6).map((skill) => (
                    <div key={skill.id} className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-2">{skill.title}</h4>
                      <p className="text-sm text-gray-600 mb-3 line-clamp-2">{skill.goal}</p>
                      <button
                        onClick={() => startPracticeSession(skill)}
                        className="w-full px-3 py-2 bg-brand-primary text-white rounded text-sm hover:opacity-90"
                      >
                        Start Practice
                      </button>
                    </div>
                  ))}
                </div>

                {practiceSessions.length > 0 && (
                  <div className="border-t pt-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Practice Sessions</h3>
                    <div className="space-y-3">
                      {practiceSessions
                        .slice(-5)
                        .reverse()
                        .map((s) => (
                          <div key={s.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div>
                              <p className="font-medium text-gray-900">{s.skillTitle}</p>
                              <p className="text-sm text-gray-600">
                                {s.startTime.toLocaleDateString()} at {s.startTime.toLocaleTimeString()}
                              </p>
                            </div>
                            <span
                              className={`px-2 py-1 rounded-full text-xs ${
                                s.completed ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"
                              }`}
                            >
                              {s.completed ? "Completed" : "In Progress"}
                            </span>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Resources */}
        {activeTab === "resources" && (
          <div className="p-6 space-y-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Crisis Support Resources</h3>
              <p className="text-gray-600">
                If you are experiencing a mental health emergency, please reach out for immediate support.
              </p>
            </div>

            {DEFAULT_EMERGENCY_RESOURCES.map((r: EmergencyResource, i: number) => {
              const isText = r.phone?.toLowerCase?.().includes("text");
              return (
                <div key={i} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">{r.name}</h4>
                      <p className="text-gray-600 text-sm mt-1">{r.description}</p>
                      {r.available && <p className="text-gray-500 text-xs mt-1">Available: {r.available}</p>}
                    </div>
                    <div className="ml-4 text-right">
                      {isText ? (
                        <a
                          href={`sms:${
                            r.phone.includes("741741")
                              ? "741741?body=HOME"
                              : r.phone.includes("686868")
                              ? "686868?body=CONNECT"
                              : r.phone.includes("85258")
                              ? "85258?body=SHOUT"
                              : ""
                          }`}
                          className="inline-block bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-blue-700"
                        >
                          üì± {r.phone}
                        </a>
                      ) : (
                        <a
                          href={`tel:${r.phone.replace(/[^0-9]/g, "")}`}
                          className="inline-block bg-brand-primary text-white px-3 py-2 rounded-lg text-sm font-medium hover:opacity-90"
                        >
                          üìû Call {r.phone}
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-1">Organization-Specific Resources</h4>
              <p className="text-blue-700 text-sm">
                Your organization may offer chaplains, peer support, or psychology services. Check with your supervisor or
                HR for options.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}


==== ./src/components/Profile.tsx ====
import { useEffect, useMemo, useState } from "react";
import type { MentalArmorSkill } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";
import { practiceKitUtils } from "@/utils/practiceKit";

export default function Profile() {
  const [kitIds, setKitIds] = useState<string[]>([]);

  useEffect(() => {
    setKitIds(practiceKitUtils.getPracticeKitSkills());
    const onUpdate = () => setKitIds(practiceKitUtils.getPracticeKitSkills());
    window.addEventListener("practiceKitUpdated", onUpdate);
    return () => window.removeEventListener("practiceKitUpdated", onUpdate);
  }, []);

  const kitSkills: MentalArmorSkill[] = useMemo(
    () => MENTAL_ARMOR_SKILLS.filter((s) => kitIds.includes(s.id)),
    [kitIds]
  );

  const removeFromKit = (id: string) => {
    practiceKitUtils.removeSkillFromPracticeKit(id);
    setKitIds(practiceKitUtils.getPracticeKitSkills());
  };

  const clearKit = () => {
    practiceKitUtils.clearPracticeKit();
    setKitIds([]);
  };

  const startPractice = (skill: MentalArmorSkill) => {
    localStorage.setItem("start-practice-skill", JSON.stringify({ id: skill.id, title: skill.title }));
    alert(`Practice session for "${skill.title}" is queued. Go to the Repair Kit ‚Üí Practice tab to begin.`);
  };

  return (
    <div className="max-w-5xl mx-auto space-y-8">
      <header className="text-center">
        <h1 className="text-2xl font-bold text-gray-900">Your Profile & Practice Kit</h1>
        <p className="text-gray-600 mt-1">
          Add Mental Armor‚Ñ¢ skills to your kit, then practice them regularly to build resilient habits.
        </p>
      </header>

      <section className="bg-white rounded-lg shadow p-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h2 className="text-lg font-semibold text-gray-900">Practice Kit</h2>
            <p className="text-gray-600">
              {kitSkills.length === 0
                ? "You don‚Äôt have any skills in your Practice Kit yet."
                : `You have ${kitSkills.length} skill${kitSkills.length > 1 ? "s" : ""} ready to practice.`}
            </p>
          </div>
          <div className="flex gap-2">
            <button
              onClick={() => setKitIds(practiceKitUtils.getPracticeKitSkills())}
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
            >
              Refresh
            </button>
            <button
              onClick={clearKit}
              disabled={kitSkills.length === 0}
              className="px-3 py-2 bg-gray-200 text-gray-800 rounded-lg text-sm hover:bg-gray-300 disabled:opacity-50"
            >
              Clear Kit
            </button>
          </div>
        </div>

        {kitSkills.length === 0 ? (
          <div className="mt-6 text-center text-gray-600">
            <p>Add skills from the Go-Bag to see them here.</p>
          </div>
        ) : (
          <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
            {kitSkills.map((skill) => (
              <article key={skill.id} className="border border-gray-200 rounded-lg p-4 flex flex-col">
                <h3 className="font-semibold text-gray-900 text-lg">{skill.title}</h3>
                <p className="text-sm text-gray-600 mt-1 line-clamp-3">{skill.goal}</p>

                <div className="mt-3 space-y-2">
                  <div className="flex flex-wrap gap-1">
                    {skill.modules.map((m) => (
                      <span key={m} className="px-2 py-0.5 bg-gray-100 text-gray-700 text-xs rounded-full">{m}</span>
                    ))}
                  </div>
                  <div className="flex flex-wrap gap-1">
                    {skill.domains.map((d) => (
                      <span key={d} className="px-2 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full">{d}</span>
                    ))}
                  </div>
                </div>

                <div className="mt-4 grid grid-cols-2 gap-2">
                  <button
                    onClick={() => startPractice(skill)}
                    className="col-span-2 px-3 py-2 bg-brand-primary text-white rounded-lg text-sm font-medium hover:opacity-90"
                  >
                    Start Practice
                  </button>
                  <button
                    onClick={() => removeFromKit(skill.id)}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
                  >
                    Remove
                  </button>
                  <a
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      window.scrollTo({ top: 0, behavior: "smooth" });
                      alert("Open the Go-Bag to view full details for this skill.");
                    }}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm text-gray-700 text-center hover:bg-gray-50"
                  >
                    View Details
                  </a>
                </div>
              </article>
            ))}
          </div>
        )}
      </section>

      <section className="bg-blue-50 border border-blue-200 rounded-lg p-5">
        <h2 className="font-semibold text-blue-900">Tips to Get the Most from Your Practice</h2>
        <ul className="list-disc ml-5 mt-2 text-sm text-blue-800 space-y-1">
          <li>Pick 1‚Äì2 skills and practice them for a week.</li>
          <li>Schedule short daily reps (2‚Äì5 minutes beats zero minutes).</li>
          <li>After practice, jot one sentence about what you noticed.</li>
        </ul>
      </section>
    </div>
  );
}



==== ./src/vite-env.d.ts ====
/// <reference types="vite/client" />



==== ./src/data/trainers.ts ====
// src/data/trainers.ts
// Mental Armor Trainers Data - Reorganized Order with Updated Bios

export interface Trainer {
  id: string;
  name: string;
  image: string;
  voice: string;
  bio: string;
  specialties: string[];
}

export const TRAINERS: Trainer[] = [
  {
    id: "rhonda",
    name: "Rhonda",
    image: "/trainers/rhonda.jpg",
    voice: `You are bold and direct, like a Military General. You don't tolerate excuses and reject the word 'can't' unless it's physically impossible. You draw from your experience as a POW and command surgeon.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer Brigadier General (retired) Rhonda Cornum, PhD, MD who has a unique perspective, having served as the first Director of the U.S. Army's novel Comprehensive Soldier Fitness initiative. Recently renamed Army Comprehensive Fitness, this strategy represents the model for universal implementation of physical and psychological health promotion within the Department of Defense. She previously served as the Assistant Surgeon General for Force Projection, responsible for the policies and procedures to prepare Soldiers and units for deployment, and commanded the Landstuhl Regional Medical Center, the evacuation hub for Iraq, Afghanistan, Africa and Europe. During this assignment, she commissioned development of the Joint Patient Tracking Application and pioneered use of the Nova Lung during critical care air transport. Doctor Cornum has written or co-authored one book, five book chapters, and numerous scientific articles. She sits on numerous committees and advisory boards, including the Secretary's POW Advisory Committee for the VA, the External Advisory Board for the Millennium Cohort Study, and is a Professor of Military and Emergency Medicine at the Uniformed Services University of the Health Sciences. Dr Cornum is Board certified in Urology, a Fellow in both the American College of Surgeons and the Aerospace Medical Association and is a member of the American Society of Nutrition.`,
    specialties: ['Foundations of Resilience', 'Leadership under pressure', 'Military mindset', 'Overcoming adversity']
  },
  {
    id: "jill",
    name: "Jill",
    image: "/trainers/jill.jpg",
    voice: `You are warm, academic, emotionally insightful, and able to hold multiple perspectives. You blend psychology with practicality.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer Jill who is a community and developmental psychologist with significant experience in evaluation and the development and implementation of strengths-based prevention programs. Dr. Antonishak was an American Association for the Advancement of Science's Congressional Fellow for the Health, Education, Labor, and Pensions Committee. After her fellowship, she was hired as full-time staff on the Committee, with a focus on family support, military mental health, and suicide prevention. She received her Ph.D. in Community and Developmental Psychology from the University of Virginia and her B.A. from Goucher College. She completed a postdoctoral fellowship in adolescent development at UVA, where she worked on a longitudinal study of adolescents, their friends, and family. She has received fellowships from the National Institute of Mental Health, the Pediatric AIDS Foundation, and the Society for the Psychological Study of Social Issues.`,
    specialties: ['Psychology insights', 'Family dynamics', 'Development and growth', 'Research-based approaches']
  },
  {
    id: "chris",
    name: "Chris",
    image: "/trainers/chris.jpg",
    voice: `You're a resilient soldier and reflective leader who believes deeply in legacy and growth through experience. You are a deeply feeling and faithful husband and an experienced father of 4 adult children. You are VERY creative in your thinking. You are willing to learn almost anything and have a growth mindset. You are kind but can easily give tough love. You enjoy going to the gym and achieving goals but can be hard on yourself when you falter. You are very introspective almost to a fault.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer Christopher Poe (First Sergeant, ret) who is a decorated Combat Infantryman with over 27 years of service to the U.S. Army. His career has included combat, humanitarian and peacekeeping operations in Cuba, Kuwait, Iraq, Afghanistan, Bosnia-Hercegovina, and E. Africa. For almost a decade, Chris has been successfully delivering research focused, well-being and resilience skills in- and out- of uniform. As a resilience skills trainer and a former Drill Sergeant, Chris brings a truly unique and authentic experience to his audiences. His training comes from the heart.`,
    specialties: ['Spiritual Resilience', 'ReFrame', "What's Most Important", 'Military experience', 'Personal growth', 'Tough love coaching']
  },
  {
    id: "aj",
    name: "AJ",
    image: "/trainers/aj.jpg",
    voice: `You're energetic, upbeat, and goal-driven. You draw strength from your own accomplishments and love helping people grow. You enjoy research and puzzles; you like cooking and time with people you care about. You're social yet enjoy home time. Deep and inquisitive; faith matters to you without judgment of others; well-traveled with photos from more than 63 countries.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer AJ who is one of the first 150 graduates of Penn's MAPP program, bringing a decade of applied positive psychology to clients from Wharton to the U.S. military. She's also a world-traveling photographer and an unabashed vintage-VW fan.`,
    specialties: ['Flex Your Strengths', 'Mindfulness', 'Positive psychology', 'Character strengths', 'Goal achievement']
  },
  {
    id: "scotty",
    name: "Scotty",
    image: "/trainers/scotty.jpg",
    voice: `You speak with humble warmth, a Southern kindness, and spiritual insight. You love to laugh and smile with family and friends. You gently guide others using stories and heartfelt care.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer Gerald "Scotty" Bryan who is a transformational leader and proven collaborator with extensive experience in developing and implementing pioneering initiatives for the Department of Homeland Security (DHS) and other federal government agencies. With a strong track record of national success, Scotty excels in building teams and capacity, as well as instructing, presenting, and facilitating in dynamic environments. Throughout his career, Scotty has held key leadership roles, including Director/Associate Chief at Customs and Border Protection (CBP) and Assistant Chief Patrol Agent at the Border Patrol Academy. His notable achievements include coordinating a groundbreaking study with the RAND Corporation on CBP employee resilience, partnering with the U.S. Air Force to implement resilience training within DHS, and launching the CBP Veteran Support Program. Scotty also pioneered the CBP Mindfulness-Based Resilience Training (MBRT) pilot and the CBP Traumatic Incidents and Events Response (TIER) Team, significantly impacting the agency's approach to employee wellness and traumatic event response. As a founding member and National Commander of the Border Patrol Search, Trauma, and Rescue Team (BORSTAR), Scotty played a crucial role in establishing national training programs and response protocols, earning BORSTAR recognition as a top-tier law enforcement response team. His efforts in various roles have been recognized with multiple awards, including the DHS Exceptional Meritorious Achievement and the CBP Commissioner's Award for Outstanding Accomplishment. Scotty holds a Bachelor's Degree in Law Enforcement/Police Science from Sam Houston State University and has completed numerous job-related training and certifications, including the CBP Leadership Institute and U.S. Air Force Master Resiliency Trainer program. With a commitment to innovation, collaboration, and excellence, Scotty continues to influence and enhance federal government operations and employee resilience. In his retirement from USCBP, Scotty has enjoyed building his "forever home" with his wife Tracey in the majestic and rural countryside of the Ozark Mountains of Arkansas.`,
    specialties: ['Cultivate Gratitude', 'Good Listening & Celebrate Good News', 'Spiritual guidance', 'Team building']
  },
  {
    id: "terry",
    name: "Terry",
    image: "/trainers/terry.jpg",
    voice: `You have a dry, witty Bronx humor and a master's in social work. You're compassionate, but always up for a smart remark.`,
    bio: `This AI Coach is based on Mental Armor‚Ñ¢ Trainer Terry who started teaching 7th graders in the Bronx and later served as a commissioned officer in the Army Reserve/Guard. He helps organizations‚Äîincluding Coca-Cola and Lockheed Martin‚Äîbuild cultures where people perform at their best, with wit and heart.`,
    specialties: ['Values Based Living', 'Balance Your Thinking', 'Interpersonal Problem Solving', 'Workplace dynamics', 'Practical wisdom']
  }
];

export const getTrainerById = (id: string): Trainer | undefined => {
  return TRAINERS.find(trainer => trainer.id === id);
};


==== ./src/data/skills.ts ====
import type { MentalArmorSkill } from "@/types/emergency";

export const MENTAL_ARMOR_SKILLS: MentalArmorSkill[] = [
  {
    id: "foundations-resilience",
    title: "Foundations of Resilience",
    trainer: "Rhonda",
    modules: ["Foundation", "Values & Meaning", "Resilient Thinking", "Social Resilience"],
    domains: ["emotional", "social", "family", "spiritual"],
    goal: "Learn how resilience helps us withstand, recover, and grow ‚Äî and why understanding its foundations is essential to mental strength and endurance.",
    whenToUse: "When you need the science of resilience, why practice matters day-to-day, or the right mindset for developing resilience in yourself and others.",
    benefits: [
      "Clarifies what resilience is and how it shows up in everyday life",
      "Builds a shared language and understanding around resilience concepts",
      "Corrects common myths about resilient people",
      "Explains neuroplasticity and how resilience changes the brain",
      "Introduces growth mindset and how it drives long-term development",
      "Builds awareness of how practicing resilience improves performance and well-being",
    ],
    steps: [
      "Watch the introduction (Dr. Cornum‚Äôs story)",
      "Learn to define resilience and its attributes",
      "Watch real examples and identify attributes in action",
      "Choose 3‚Äì5 attributes that describe you; reflect on a time you used them",
      "Debunk common myths about resilient people",
      "Learn the science (neuroplasticity)",
      "Adopt a growth mindset",
    ],
    image: "/skills/foundations_of_resilience.png",
  },
  {
    id: "flex-your-strengths",
    title: "Flex Your Strengths",
    trainer: "AJ",
    modules: ["Values & Meaning"],
    domains: ["emotional", "family", "social"],
    goal: "Identify and apply your character strengths at work and at home‚Äîand notice and appreciate strengths in yourself and others.",
    whenToUse: "Regularly to capitalize on your strengths; especially when facing a challenge.",
    benefits: [
      "Increased energy and performance",
      "Greater confidence and happiness",
      "Stronger relationships",
      "Greater ability to live your values and reach goals",
      "Reduced stress; more meaning and purpose",
      "Better engagement at work/school when focusing on what‚Äôs strong, not what‚Äôs wrong",
    ],
    steps: [
      "Understand what character strengths are (vs. talents/skills)",
      "Identify your signature strengths (e.g., VIA survey)",
      "Review what each of your top strengths means in daily life",
      "Regulate strengths: right way, right time, right amount",
      "Spot strengths in others",
      "Use your strengths in new, meaningful ways",
    ],
    image: "/skills/flex_your_strengths.png",
  },
  {
    id: "values-based-living",
    title: "Values Based Living",
    trainer: "Terry",
    modules: ["Values & Meaning"],
    domains: ["emotional", "family", "spiritual"],
    goal: "Provide a sense of purpose and meaning by focusing on your core values.",
    whenToUse: "When you need a sense of direction or renewal.",
    benefits: [
      "Clear sense of direction and purpose",
      "Better alignment between actions and values",
      "Reduced stress from conflicting priorities",
      "Greater motivation and follow-through",
    ],
    steps: [
      "Define your values (pick your top 3‚Äì5)",
      "Set goals based on those values",
      "Chart your course: immediate (24h), short-term (2 weeks), long-term (3 months)",
      "Plan for obstacles (internal & external) and how you‚Äôll overcome them",
      "Share your goal and action plan with a partner for accountability",
    ],
    image: "/skills/values_based_living.png",
  },
  {
    id: "spiritual-resilience",
    title: "Spiritual Resilience",
    trainer: "Chris",
    modules: ["Values & Meaning"],
    domains: ["spiritual", "family"],
    goal: "Identify the beliefs, principles, and values that sustain well-being, purpose, and hope.",
    whenToUse: "Regularly, and when you need understanding, renewal, or direction.",
    benefits: [
      "Inspires optimism and belief in growth",
      "Enables acceptance and positive perseverance through adversity",
      "Strengthens relationships and connection to others",
      "Supports deeper meaning, purpose, and transcendence",
    ],
    steps: [
      "Identify spiritual attributes and core beliefs that define your sense of meaning",
      "Reflect on which beliefs give you direction, purpose, and connection",
      "Strengthen hope by drawing on those beliefs during stress",
      "Make meaning of adversity: accept, reflect, grow",
    ],
    image: "/skills/spiritual.png",
  },
  {
    id: "cultivate-gratitude",
    title: "Cultivate Gratitude",
    trainer: "Scotty",
    modules: ["Values & Meaning", "Resilient Thinking"],
    domains: ["emotional", "family"],
    goal: "Build optimism and positive emotions by deliberately paying attention to good things.",
    whenToUse: "Regularly or when facing challenges.",
    benefits: [
      "Improved sleep",
      "Progress on goals",
      "Stronger social relationships",
      "Lower risk of depression, anxiety, and loneliness",
      "Better coping with hassles and stress",
    ],
    steps: [
      "Notice one thing that went well in the last 24 hours (even small)",
      "Reflect: why it went well, why it mattered, how you/others contributed",
      "Make it a habit (daily/weekly)",
      "Optional: write it down (journal/app)",
      "Optional: review past wins to lift mood",
    ],
    image: "/skills/gratitude.png",
  },
  {
    id: "mindfulness",
    title: "Mindfulness",
    trainer: "AJ",
    modules: ["Foundation", "Resilient Thinking"],
    domains: ["emotional", "spiritual"],
    goal: "Reduce stress and distraction; stay focused, calm, and engaged.",
    whenToUse: "Regularly; when distracted; when stressed or overwhelmed.",
    benefits: [
      "Greater optimism and confidence",
      "Stronger relationships",
      "Higher life satisfaction and well-being",
      "Better physical health",
    ],
    steps: [
      "Practice informally during everyday activities (eat, walk, chores)",
      "Practice formally (brief meditation, visualization, focused breathing)",
      "Use in the moment (deep breaths; five-senses grounding: notice what you see/hear/feel, etc.)",
    ],
    image: "/skills/mindfulness.png",
  },
  {
    id: "reframe",
    title: "ReFrame",
    trainer: "Chris",
    modules: ["Foundation", "Resilient Thinking"],
    domains: ["emotional"],
    goal: "Recognize how thoughts drive emotions and behavior; reframe to take more productive action.",
    whenToUse: "When you need to understand an unhelpful reaction; to slow down and respond more effectively.",
    benefits: [
      "Improved performance",
      "Alignment with personal values",
      "Stronger relationships",
      "Greater ability to achieve goals",
    ],
    steps: [
      "Describe the event objectively (one event; facts only)",
      "Identify heat-of-the-moment thoughts/beliefs, emotions, and behaviors (including physiological)",
      "Ask if the reaction harmed performance, values, goals, or relationships",
      "Reframe the thought/belief for a more productive outcome",
      "Make a new plan (now or later)",
    ],
    image: "/skills/reframe.png",
  },
  {
    id: "balance-your-thinking",
    title: "Balance Your Thinking",
    trainer: "Terry",
    modules: ["Resilient Thinking"],
    domains: ["emotional"],
    goal: "See situations accurately and act based on evidence.",
    whenToUse: "When you don‚Äôt understand your reaction; when it wasn‚Äôt helpful; to slow down in the moment.",
    benefits: [
      "Improved performance",
      "Alignment with values",
      "Stronger relationships",
      "Greater ability to achieve goals",
    ],
    steps: [
      "Describe the event objectively",
      "Identify thoughts/beliefs, emotions, and behaviors (including physiological)",
      "Select an unhelpful thought/belief and apply the 3 strategies:\n  o Examine the Evidence\n  o Check for a Double Standard\n  o Phone a Friend or Ask the Person Involved",
      "Ask if your reaction harmed performance, values, goals, or relationships",
      "Reframe the unbalanced thought/belief",
      "Make a new plan (now or later)",
    ],
    image: "/skills/balance_your_thinking.png",
  },
  {
    id: "whats-most-important",
    title: "What‚Äôs Most Important",
    trainer: "Chris",
    modules: ["Values & Meaning", "Resilient Thinking"],
    domains: ["emotional"],
    goal: "Notice when old habits/‚Äúshoulds‚Äù hijack your thinking; refocus on what truly matters right now.",
    whenToUse: "If your reaction hurt performance/values/goals/relationships; if it felt uncharacteristic; if you‚Äôre dwelling or stuck in a pattern.",
    benefits: [
      "Improved performance",
      "Alignment with personal values",
      "Stronger relationships",
      "Greater ability to achieve goals",
    ],
    steps: [
      "Describe the event objectively",
      "Identify thoughts/beliefs, emotions, and behaviors (including physiological)",
      "Identify influences (values or ‚Äúshoulds,‚Äù past experiences, internal board of directors, other factors)",
      "Decide if your reaction is helping or harming what matters",
      "Ask: What is most important right now? Reframe to serve that",
      "Make a new plan (now or later)",
    ],
    image: "/skills/whats_most_important.png",
  },
  {
    id: "interpersonal-problem-solving",
    title: "Interpersonal Problem Solving",
    trainer: "Terry",
    modules: ["Social Resilience"],
    domains: ["social", "family"],
    goal: "Address problems in a way that shows respect, lowers intensity, and leads to a solution both parties can live with.",
    whenToUse: "When you need a resolution to an interpersonal problem.",
    benefits: [
      "Builds and strengthens relationships",
      "Builds optimism",
      "Helps achieve goals",
      "Supports acting on values",
      "Enables proactive problem solving",
    ],
    steps: [
      "Do your homework before the conversation (define the problem; growth mindset; balanced thinking; readiness to listen)",
      "State the problem with the Wind-Up Approach (positive start + clear, ‚ÄúI‚Äù language; short/specific/growth-minded)",
      "Ask for the other person‚Äôs perspective",
      "Generate solutions together (brainstorm)",
      "Evaluate options",
      "Choose a solution and seal the agreement",
    ],
    image: "/skills/interpersonal.png",
  },
  {
    id: "good-listening",
    title: "Good Listening & Celebrate Good News",
    trainer: "Scotty",
    modules: ["Social Resilience"],
    domains: ["social", "family"],
    goal: "Build, strengthen, and maintain important relationships.",
    whenToUse: "Always practice good listening; use celebration when someone shares good news.",
    benefits: [
      "Stronger relationships",
      "Builds positive emotions",
      "Lays a foundation for times when support is needed",
    ],
    steps: [
      "Apply the ABCDEs: Attend with genuine interest, Be responsive, Care, Don‚Äôt interrupt, Encourage more",
      "Celebrate because you care about the person (not just the news)",
      "Keep it short but sincere; ask a few thoughtful questions",
      "Help them savor and re-live the moment",
      "Use Conversation A (celebrate now), then Conversation B later for concerns if needed",
      "If the news is dangerous/harmful: don‚Äôt celebrate; offer support instead",
    ],
    image: "/skills/good_listening.png",
  },
];



==== ./src/data/practices/foundations-resilience.ts ====
// src/data/practices/foundations-resilience.ts

import type { SkillPractice } from "./types";

export const foundationsResiliencePractice: SkillPractice = {
  skillId: "foundations-resilience",
  title: "Foundations of Resilience Practice",
  description: "Build understanding of resilience through examples, self-reflection, and practical application to develop your mental armor foundation.",
  printTitle: "Mental Armor‚Ñ¢ - Foundations of Resilience Practice Worksheet",
  totalTimeEstimate: "30-45 minutes",
  difficulty: "beginner",
  sections: [
    {
      id: "resilience-definition",
      title: "Step 1: Understanding Resilience",
      description: "Start by establishing your understanding of what resilience means and how it shows up in real life.",
      timeEstimate: "5 minutes",
      fields: [
        {
          id: "personal-definition",
          type: "textarea",
          label: "In your own words, how would you define resilience?",
          placeholder: "Think about what resilience means to you personally...",
          rows: 3,
          required: true,
          helpText: "Consider how you've seen resilience in your work or personal life"
        },
        {
          id: "resilience-examples",
          type: "textarea",
          label: "What are some examples of resilience you've observed?",
          placeholder: "Consider situations where you or others bounced back from challenges...",
          rows: 4,
          required: true
        }
      ]
    },
    {
      id: "resilience-attributes",
      title: "Step 2: Identifying Resilience Attributes",
      description: "Explore the key attributes that make someone resilient. Think about the characteristics that help people withstand, recover, and grow from adversity.",
      timeEstimate: "8 minutes",
      fields: [
        {
          id: "key-attributes",
          type: "textarea",
          label: "List 5-7 attributes you believe are most important for resilience",
          placeholder: "Examples: Adaptability, Optimism, Self-awareness, Social connection, Purpose...",
          rows: 4,
          required: true
        },
        {
          id: "attribute-ranking",
          type: "textarea",
          label: "Which 3 attributes from your list do you consider most critical? Why?",
          placeholder: "Rank your top 3 and explain why each is essential...",
          rows: 4,
          required: true
        }
      ]
    },
    {
      id: "historical-example",
      title: "Step 3: Historical Resilience Example",
      description: "Analyze a well-known figure who demonstrated resilience. This helps you see resilience attributes in action.",
      timeEstimate: "10 minutes",
      fields: [
        {
          id: "historical-figure",
          type: "text",
          label: "Choose a historical figure known for resilience",
          placeholder: "e.g., Nelson Mandela, Marie Curie, Frederick Douglass...",
          required: true
        },
        {
          id: "figure-challenges",
          type: "textarea",
          label: "What major challenges or adversities did this person face?",
          placeholder: "Describe the specific difficulties they encountered...",
          rows: 3,
          required: true
        },
        {
          id: "figure-responses",
          type: "textarea",
          label: "How did they respond to these challenges? What resilience attributes did they demonstrate?",
          placeholder: "Connect their actions to specific resilience characteristics...",
          rows: 4,
          required: true
        },
        {
          id: "figure-growth",
          type: "textarea",
          label: "How did they grow stronger or create positive change through their adversity?",
          placeholder: "What positive outcomes resulted from their resilient responses?",
          rows: 3,
          required: true
        }
      ]
    },
    {
      id: "personal-resilience",
      title: "Step 4: Personal Resilience Reflection",
      description: "Now examine your own resilience story. This helps you recognize the strengths you already possess.",
      timeEstimate: "12 minutes",
      fields: [
        {
          id: "personal-challenge",
          type: "textarea",
          label: "Describe a challenging situation you've faced in your personal or professional life",
          placeholder: "Choose a situation where you had to show resilience...",
          rows: 4,
          required: true
        },
        {
          id: "initial-reaction",
          type: "textarea",
          label: "What was your initial reaction to this challenge? How did you feel?",
          placeholder: "Be honest about your first thoughts and emotions...",
          rows: 3,
          required: true
        },
        {
          id: "coping-strategies",
          type: "textarea",
          label: "What specific actions did you take to handle this situation?",
          placeholder: "List the concrete steps you took to address the challenge...",
          rows: 4,
          required: true
        },
        {
          id: "support-systems",
          type: "textarea",
          label: "Who or what helped you through this difficult time?",
          placeholder: "Consider people, resources, beliefs, or practices that supported you...",
          rows: 3,
          required: true
        },
        {
          id: "lessons-learned",
          type: "textarea",
          label: "What did you learn about yourself from this experience?",
          placeholder: "Reflect on new insights about your capabilities and character...",
          rows: 4,
          required: true
        }
      ]
    },
    {
      id: "resilience-assessment",
      title: "Step 5: Current Resilience Assessment",
      description: "Honestly assess your current resilience strengths and areas for growth.",
      timeEstimate: "8 minutes",
      fields: [
        {
          id: "current-strengths",
          type: "textarea",
          label: "Based on your reflection, what are your current resilience strengths?",
          placeholder: "Which resilience attributes do you already demonstrate well?",
          rows: 4,
          required: true
        },
        {
          id: "growth-areas",
          type: "textarea",
          label: "What resilience attributes would you like to develop further?",
          placeholder: "Which areas could use strengthening to build your mental armor?",
          rows: 4,
          required: true
        },
        {
          id: "resilience-rating",
          type: "select",
          label: "Overall, how would you rate your current resilience level?",
          options: [
            "Still developing - I struggle with most challenges",
            "Building resilience - I handle some challenges well",
            "Moderately resilient - I bounce back from many difficulties",
            "Quite resilient - I recover well from most setbacks",
            "Highly resilient - I consistently grow stronger through adversity"
          ],
          required: true
        }
      ]
    },
    {
      id: "application-planning",
      title: "Step 6: Building Your Mental Armor Plan",
      description: "Create a specific plan for strengthening your resilience foundation using Mental Armor‚Ñ¢ skills.",
      timeEstimate: "7 minutes",
      fields: [
        {
          id: "priority-skills",
          type: "multiselect",
          label: "Which Mental Armor‚Ñ¢ skills do you want to focus on first?",
          options: [
            "Mindfulness",
            "Values-Based Living", 
            "ReFrame",
            "Cultivate Gratitude",
            "Spiritual Resilience",
            "Flex Your Strengths",
            "Balance Your Thinking",
            "What's Most Important",
            "Interpersonal Problem Solving",
            "Good Listening & Celebrate Good News"
          ],
          required: true,
          helpText: "Select 2-3 skills to focus on initially"
        },
        {
          id: "daily-practices",
          type: "textarea",
          label: "What daily or weekly practices will you commit to for building resilience?",
          placeholder: "Be specific about what you'll do and when...",
          rows: 4,
          required: true
        },
        {
          id: "accountability",
          type: "textarea",
          label: "How will you track your progress and stay accountable?",
          placeholder: "Consider journaling, check-ins with others, or specific metrics...",
          rows: 3,
          required: true
        },
        {
          id: "obstacle-planning",
          type: "textarea",
          label: "What obstacles might prevent you from practicing resilience skills, and how will you overcome them?",
          placeholder: "Anticipate challenges and plan solutions...",
          rows: 4,
          required: true
        }
      ]
    }
  ]
};


==== ./src/data/practices/types.ts ====
export interface PracticeFormField {
  id: string;
  type: 'text' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'scale' | 'multiselect';
  label: string;
  placeholder?: string;
  required?: boolean;
  options?: string[];
  rows?: number;
  min?: number;
  max?: number;
  step?: number;
  helpText?: string;
}

export interface PracticeSection {
  id: string;
  title: string;
  description?: string;
  fields: PracticeFormField[];
  timeEstimate?: string;
}

export interface SkillPractice {
  skillId: string;
  title: string;
  description: string;
  sections: PracticeSection[];
  printTitle: string;
  totalTimeEstimate?: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  prerequisites?: string[];
  followUpSkills?: string[];
}

export interface PracticeSessionData {
  [fieldId: string]: string | string[];
}

export interface CompletedPracticeSession {
  id: string;
  skillId: string;
  skillTitle: string;
  practiceTitle: string;
  data: PracticeSessionData;
  completedAt: Date;
  duration?: number;
}


==== ./src/data/practices/index.ts ====
// src/data/practices/index.ts

import type { SkillPractice } from "./types";
import { foundationsResiliencePractice } from "./foundations-resilience";

export const SKILL_PRACTICES: Record<string, SkillPractice> = {
  "foundations-resilience": foundationsResiliencePractice,
};

export const getPracticeBySkillId = (skillId: string): SkillPractice | undefined => {
  return SKILL_PRACTICES[skillId];
};

export const hasPracticeSession = (skillId: string): boolean => {
  return skillId in SKILL_PRACTICES;
};

export const getAvailablePracticeSkillIds = (): string[] => {
  return Object.keys(SKILL_PRACTICES);
};

export type { 
  SkillPractice, 
  PracticeSection, 
  PracticeFormField, 
  PracticeSessionData,
  CompletedPracticeSession 
} from "./types";


==== ./src/services/enhanced-skill-suggestions.ts ====
// src/services/enhanced-skill-suggestions.ts
import type { MentalArmorSkill } from "@/types/emergency";
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";

// Complete updated SKILL_KEYWORD_MAP and SITUATION_SKILL_MAP
// Replace both sections in your src/services/enhanced-skill-suggestions.ts

const SKILL_KEYWORD_MAP = {
  "mindfulness": [
    // Anxiety/panic specific - HIGH PRIORITY
    "anxiety", "anxious", "high anxiety", "panic", "worried", "nervous", "tense", "stress", "stressed",
    "overwhelmed", "racing thoughts", "can't focus", "distracted", "restless",
    "jittery", "on edge", "wound up", "keyed up", "agitated",
    // Traditional mindfulness
    "mindfulness", "present", "focused", "awareness", "meditation", "breathing", 
    "calm", "grounding", "senses", "mindful", "breathe", "center"
  ],
  "reframe": [
    // Negative thinking patterns - HIGH PRIORITY for job anxiety
    "always think", "going to lose", "will happen", "lose my job", "what if",
    "negative thoughts", "catastrophic thinking", "worst case", "doom", "disaster",
    "always", "never", "everything", "nothing", "terrible", "awful",
    "catastrophe", "horrible", "ruined", "destroyed", "failed",
    // Traditional reframe
    "reframe", "thoughts", "thinking", "perspective", "reaction",
    "productive", "beliefs", "emotions", "behavior", "cognitive"
  ],
  "balance-your-thinking": [
    // Cognitive distortions - HIGH PRIORITY for job/future anxiety
    "lose my job", "going to lose", "always think", "catastrophizing",
    "overthinking", "ruminating", "spiraling", "black and white",
    "all or nothing", "jumping to conclusions", "mind reading", "fortune telling",
    "should", "must", "have to", "always", "never", "everyone", "nobody",
    // Traditional balance
    "balance", "evidence", "double standard", "accurate", "examine",
    "realistic", "facts", "proof", "logical", "rational"
  ],
  "whats-most-important": [
    // Family/priority concerns - MEDIUM PRIORITY
    "support my family", "provide for family", "family security", "financial security",
    "priorities mixed up", "everything urgent", "can't decide", "pulled in directions",
    "too many demands", "conflicted", "torn between", "competing priorities",
    "scattered", "all over the place", "chaos", "juggling too much",
    // Traditional priorities
    "important", "priorities", "values", "focus", "essential", "critical",
    "matters most", "core", "fundamental", "key"
  ],
  "values-based-living": [
    // Purpose/direction - MEDIUM PRIORITY
    "support my family", "family responsibility", "provide for",
    "lost", "no direction", "meaningless", "purposeless", "don't know why",
    "what's the point", "no motivation", "empty", "hollow", "directionless",
    "confused", "uncertain", "adrift", "aimless", "wandering",
    // Traditional values
    "values", "purpose", "meaning", "direction", "goals", "priorities",
    "alignment", "motivation", "core beliefs", "important to me"
  ],
  "cultivate-gratitude": [
    // Depression/negativity specific - LOWER PRIORITY for anxiety
    "depressed", "sad", "down", "low", "blue", "negative", "pessimistic",
    "nothing good", "everything wrong", "bad day", "terrible", "awful",
    "hopeless", "meaningless", "empty", "numb", "lifeless",
    // Traditional gratitude
    "gratitude", "thankful", "appreciation", "positive", "optimism",
    "good things", "wins", "blessings", "grateful", "count blessings"
  ],
  "spiritual-resilience": [
    // Spiritual crisis
    "faith crisis", "lost faith", "spiritual struggle", "questioning God",
    "why me", "unfair", "meaningless suffering", "abandoned by God",
    "crisis of faith", "spiritual emptiness", "disconnected from God",
    // Traditional spiritual
    "spiritual", "beliefs", "principles", "hope", "faith", "transcendence",
    "meaning", "purpose", "acceptance", "growth", "higher power"
  ],
  "flex-your-strengths": [
    // Low self-worth
    "weak", "not good at anything", "no talents", "failure", "incompetent",
    "can't do anything right", "worthless", "inadequate", "not enough",
    "useless", "stupid", "incapable", "hopeless at", "terrible at",
    // Traditional strengths
    "strengths", "character", "talents", "good at", "capable", "skilled",
    "confidence", "abilities", "competent", "resourceful", "VIA"
  ],
  "interpersonal-problem-solving": [
    // Conflict situations
    "conflict", "argument", "fight", "disagreement", "tension", "relationship problems",
    "communication breakdown", "misunderstanding", "can't talk to", "avoiding",
    "angry at", "frustrated with", "hurt by", "betrayed", "disappointed",
    // Traditional problem solving
    "interpersonal", "problem solving", "resolution", "compromise",
    "discussion", "negotiate", "work it out", "wind-up"
  ],
  "good-listening": [
    // Isolation/communication issues
    "not heard", "nobody listens", "alone", "isolated", "disconnected",
    "relationship issues", "communication problems", "misunderstood",
    "ignored", "dismissed", "not valued", "unimportant", "invisible",
    // Traditional listening
    "listening", "heard", "understood", "connected", "supported",
    "relationships", "communication", "empathy", "ABCDE", "celebrate"
  ]
};

// Enhanced situation mapping prioritizing anxiety-appropriate skills
const SITUATION_SKILL_MAP = {
  // Anxiety-focused - CORRECTED to match AI recommendations
  "anxiety": ["mindfulness", "reframe", "balance-your-thinking"],
  "high anxiety": ["mindfulness", "reframe", "balance-your-thinking"],
  "panic": ["mindfulness", "reframe", "balance-your-thinking"], 
  "worried": ["mindfulness", "balance-your-thinking", "reframe"],
  "nervous": ["mindfulness", "reframe", "flex-your-strengths"],
  "lose my job": ["balance-your-thinking", "reframe", "whats-most-important"],
  "going to lose": ["balance-your-thinking", "reframe", "mindfulness"],
  "job security": ["balance-your-thinking", "whats-most-important", "values-based-living"],
  
  // Stress-focused  
  "stress": ["mindfulness", "whats-most-important", "reframe"],
  "stressed": ["mindfulness", "whats-most-important", "reframe"],
  "overwhelmed": ["balance-your-thinking", "whats-most-important", "mindfulness"],
  "pressure": ["mindfulness", "values-based-living", "whats-most-important"],
  
  // Family/support concerns
  "support my family": ["whats-most-important", "values-based-living", "balance-your-thinking"],
  "provide for family": ["values-based-living", "whats-most-important", "balance-your-thinking"],
  "family": ["values-based-living", "whats-most-important", "good-listening"],
  
  // Depression-focused
  "sad": ["cultivate-gratitude", "values-based-living", "flex-your-strengths"],
  "depressed": ["cultivate-gratitude", "values-based-living", "spiritual-resilience"],
  "down": ["cultivate-gratitude", "flex-your-strengths", "mindfulness"],
  "hopeless": ["values-based-living", "spiritual-resilience", "cultivate-gratitude"],
  
  // Relationship-focused
  "conflict": ["interpersonal-problem-solving", "good-listening", "reframe"],
  "relationship": ["good-listening", "interpersonal-problem-solving", "flex-your-strengths"],
  "communication": ["good-listening", "interpersonal-problem-solving", "mindfulness"],
  
  // Direction/meaning-focused
  "lost": ["values-based-living", "spiritual-resilience", "whats-most-important"],
  "direction": ["values-based-living", "spiritual-resilience", "whats-most-important"],
  "purpose": ["values-based-living", "spiritual-resilience", "flex-your-strengths"],
  "meaningless": ["values-based-living", "spiritual-resilience", "cultivate-gratitude"],
  
  // General distress
  "burnout": ["values-based-living", "mindfulness", "spiritual-resilience"],
  "exhausted": ["mindfulness", "cultivate-gratitude", "values-based-living"],
  "struggling": ["flex-your-strengths", "mindfulness", "cultivate-gratitude"]
};

export interface SkillSuggestion {
  skillId: string;
  skill: MentalArmorSkill;
  confidence: number;
  rationale: string;
  curriculumQuote?: string;
}

export class EnhancedSkillSuggestions {
  /**
   * Get skill suggestions using curriculum-first approach
   */
  static getSuggestions(userInput: string, maxSuggestions = 3): SkillSuggestion[] {
  const input = userInput.toLowerCase();
  const suggestions: SkillSuggestion[] = [];

  // 1. Enhanced keyword matching with ANXIETY BOOST
  for (const [skillId, keywords] of Object.entries(SKILL_KEYWORD_MAP)) {
    const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
    if (!skill) continue;

    const matchedKeywords = keywords.filter(keyword => 
      input.includes(keyword.toLowerCase())
    );

    if (matchedKeywords.length > 0) {
      let confidence = Math.min(0.95, 0.4 + (matchedKeywords.length * 0.15));
      
      // BOOST for anxiety-related skills when anxiety keywords detected
      const hasAnxietyKeywords = ["anxiety", "anxious", "high anxiety", "panic", "worried", "nervous"].some(k => input.includes(k));
      if (hasAnxietyKeywords && ["mindfulness", "reframe", "balance-your-thinking"].includes(skillId)) {
        confidence += 0.2; // Significant boost
      }
      
      // BOOST for job anxiety
      const hasJobAnxiety = ["lose my job", "going to lose", "job security"].some(k => input.includes(k));
      if (hasJobAnxiety && ["balance-your-thinking", "reframe"].includes(skillId)) {
        confidence += 0.25; // Major boost
      }

      suggestions.push({
        skillId,
        skill,
        confidence,
        rationale: `Direct match: ${matchedKeywords.slice(0, 3).join(', ')}`,
        curriculumQuote: skill.goal
      });
    }
  }

  // 2. Situation-based matching with anxiety priority
  for (const [situation, skillIds] of Object.entries(SITUATION_SKILL_MAP)) {
    if (input.includes(situation)) {
      for (const skillId of skillIds) {
        const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
        if (!skill || suggestions.some(s => s.skillId === skillId)) continue;

        let confidence = 0.8;
        
        // Higher confidence for anxiety situations
        if (["anxiety", "high anxiety", "worried", "lose my job"].includes(situation)) {
          confidence = 0.9;
        }

        suggestions.push({
          skillId,
          skill,
          confidence,
          rationale: `Recommended for ${situation} situations`,
          curriculumQuote: skill.whenToUse
        });
      }
    }
  }

  // Sort by confidence and return top suggestions
  return suggestions
    .sort((a, b) => b.confidence - a.confidence)
    .slice(0, maxSuggestions);
}

  /**
   * Generate curriculum-accurate response for a suggested skill
   */
  static generateSkillResponse(suggestion: SkillSuggestion, trainerStyle?: string): string {
    const { skill } = suggestion;
    
    let response = `**${skill.title}** might be helpful here. `;
    
    // Use exact curriculum language
    response += `${skill.goal}\n\n`;
    
    if (skill.whenToUse) {
      response += `**When to use:** ${skill.whenToUse}\n\n`;
    }

    // Add quick practice tip using curriculum steps
    if (skill.steps.length > 0) {
      response += `**Quick practice:** ${skill.steps[0]}\n\n`;
    }

    // Add trainer-specific guidance without changing curriculum content
    if (trainerStyle) {
      response += this.getTrainerGuidance(trainerStyle);
    }

    return response;
  }

  private static getTrainerGuidance(trainerStyle: string): string {
    switch (trainerStyle.toLowerCase()) {
      case 'rhonda':
        return "This skill works if you work it. What's your next move?";
      case 'scotty':
        return "Take this one step at a time, with patience and care.";
      case 'terry':
        return "This works in the real world when you practice it consistently.";
      case 'aj':
        return "This builds on strengths you already have. What do you notice you do well?";
      case 'chris':
        return "Growth often comes from practicing through challenging moments.";
      default:
        return "Would you like to explore this skill further?";
    }
  }

  /**
   * Validate that AI suggestions match curriculum
   */
  static validateAISuggestions(aiSuggestedIds: string[]): string[] {
    const validSkillIds = new Set(MENTAL_ARMOR_SKILLS.map(s => s.id));
    return aiSuggestedIds.filter(id => validSkillIds.has(id));
  }
}

// Export for use in other components
export { SKILL_KEYWORD_MAP, SITUATION_SKILL_MAP };


==== ./src/services/improved-openai-integration.ts ====
// src/services/improved-openai-integration.ts
import { MENTAL_ARMOR_SKILLS } from "@/data/skills";
import { EnhancedSkillSuggestions, type SkillSuggestion } from "./enhanced-skill-suggestions";
import { getOpenAIConfig } from "../config/environment";

const __ENV_OPENAI = getOpenAIConfig();
const OPENAI_API_KEY = __ENV_OPENAI.apiKey || "";
const MODEL = __ENV_OPENAI.model || "gpt-4o-mini";
const BASE_URL = "https://api.openai.com/v1";

export type ChatMsg = {
  role: "user" | "assistant" | "system";
  content: string;
};

export type CoachPersona = {
  name: string;
  style?: string;
  guardrails?: string[];
};

export type CoachResponse = {
  text: string;
  suggestedSkills?: SkillSuggestion[];
  suggestionMethod: 'curriculum' | 'ai-validated' | 'fallback';
  content?: string;
  requiresEscalation?: boolean;
};

function buildEnhancedSystemPrompt(coach?: CoachPersona): string {
  // Create detailed skill catalog with exact curriculum language
  const skillCatalog = MENTAL_ARMOR_SKILLS.map((skill) => {
    return `**${skill.id}**: ${skill.title}
   Goal: ${skill.goal}
   When to use: ${skill.whenToUse}
   Trainer: ${skill.trainer}
   Modules: ${skill.modules.join(', ')}
   Steps: ${skill.steps.join(' ‚Üí ')}`;
  }).join('\n\n');

  const coachHat = coach?.name
    ? `You are "${coach.name}", a Mental Armor‚Ñ¢ coach. ${coach?.style ?? ""}`.trim()
    : `You are a Mental Armor‚Ñ¢ coach.`;

  const strictGuardrails = [
    "CRITICAL: Use ONLY the exact language from the Mental Armor‚Ñ¢ skill catalog below",
    "NEVER create new skills, exercises, or concepts not in the catalog",
    "NEVER modify or paraphrase the curriculum language - quote it exactly",
    "If referencing a skill, use its exact title and goal statement",
    "Focus on supportive coaching using only established Mental Armor‚Ñ¢ concepts",
    "If uncertain about curriculum accuracy, be more general rather than specific",
    ...(coach?.guardrails ?? []),
  ].map(x => `- ${x}`).join("\n");

  return `${coachHat}

CRITICAL INSTRUCTION: When users ask about specific Mental Armor‚Ñ¢ skills, respond IMMEDIATELY with the exact curriculum content. Do NOT give general explanations about the program first.

RESPONSE FORMAT FOR SKILL QUESTIONS:
1. Lead with the skill's exact GOAL statement
2. Follow with exact WHEN TO USE guidance  
3. Include the exact STEPS from curriculum
4. Add brief coach-specific encouragement at the end

STRICT RULES:
- Use ONLY exact language from Mental Armor‚Ñ¢ curriculum
- NEVER create new content or paraphrase
- When a skill is mentioned, give its specific content immediately
- Do not explain "the program" - give the specific skill details
- Keep responses focused on the specific skill requested
- Do NOT suggest specific skills - the system handles skill suggestions automatically

MENTAL ARMOR‚Ñ¢ SKILL CATALOG (USE EXACT LANGUAGE ONLY):
${skillCatalog}

STRICT GUARDRAILS:
${strictGuardrails}

RESPONSE EXAMPLES:

If asked about "Foundations of Resilience":
"**Foundations of Resilience** helps you learn how resilience helps us withstand, recover, and grow ‚Äî and why understanding its foundations is essential to mental strength and endurance.

**When to use:** When you need the science of resilience, why practice matters day-to-day, or the right mindset for developing resilience in yourself and others.

**Steps to practice:**
1. Watch the introduction (Dr. Cornum's story)
2. Learn to define resilience and its attributes
3. Watch real examples and identify attributes in action
4. Choose 3‚Äî5 attributes that describe you; reflect on a time you used them
5. Debunk common myths about resilient people
6. Learn the science (neuroplasticity)
7. Adopt a growth mindset"

If asked about "Mindfulness":
"**Mindfulness** helps you reduce stress and distraction; stay focused, calm, and engaged.

**When to use:** Regularly; when distracted; when stressed or overwhelmed.

**Steps to practice:**
1. Practice informally during everyday activities (eat, walk, chores)
2. Practice formally (brief meditation, visualization, focused breathing)
3. Use in the moment (deep breaths; five-senses grounding: notice what you see/hear/feel, etc.)"

COACH-SPECIFIC GUIDANCE:
${coach?.name === 'rhonda' ? 'End with: "This skill works if you work it. What\'s your next move?"' : ''}
${coach?.name === 'scotty' ? 'End with: "Take this one step at a time, with patience and care."' : ''}
${coach?.name === 'terry' ? 'End with: "This works in the real world when you practice it consistently."' : ''}
${coach?.name === 'aj' ? 'End with: "This builds on strengths you already have."' : ''}
${coach?.name === 'chris' ? 'End with: "Growth comes through practicing these steps."' : ''}

GENERAL COACHING APPROACH:
- Provide supportive guidance using only curriculum concepts
- Keep responses focused on understanding and practical application
- Use exact curriculum language for all skill references
- The system will automatically suggest appropriate skills separately
- Stay within the Mental Armor‚Ñ¢ framework at all times`;
}

// Enhanced skill content delivery function
function getDirectSkillResponse(skillId: string, coach?: CoachPersona): string {
  const skill = MENTAL_ARMOR_SKILLS.find(s => s.id === skillId);
  if (!skill) return "";

  // Add coach-specific adlib before skill content
  let response = "";
  
  if (coach?.name) {
    switch (coach.name.toLowerCase()) {
      case 'rhonda':
        response += "That's a fundamental question that requires solid foundations. ";
        break;
      case 'scotty':
        response += "That's a deep question, friend. Let me share something that might help. ";
        break;
      case 'terry':
        response += "Now that's a question that's been around since humans started thinking. Here's what works in practice: ";
        break;
      case 'aj':
        response += "What an important question! I love that you're thinking about purpose. ";
        break;
      case 'chris':
        response += "That's the kind of question that builds character through reflection. ";
        break;
      case 'jill':
        response += "That's a profound question that touches on our core psychological needs. ";
        break;
      default:
        response += "That's an important question. ";
    }
  }

  response += `**${skill.title}** ${skill.goal}

**When to use:** ${skill.whenToUse}

**Steps to practice:**`;

  skill.steps.forEach((step, index) => {
    response += `\n${index + 1}. ${step}`;
  });

  // Add scientific benefits if available
  if (skill.benefits && skill.benefits.length > 0) {
    response += `\n\n**Scientific benefits:**`;
    skill.benefits.slice(0, 3).forEach(benefit => {
      response += `\n‚Ä¢ ${benefit}`;
    });
  }

  // Add coach-specific encouragement
  if (coach?.name) {
    switch (coach.name.toLowerCase()) {
      case 'rhonda':
        response += "\n\nThis skill works if you work it. What's your next move?";
        break;
      case 'scotty':
        response += "\n\nTake this one step at a time, with patience and care.";
        break;
      case 'terry':
        response += "\n\nThis works in the real world when you practice it consistently.";
        break;
      case 'aj':
        response += "\n\nThis builds on strengths you already have. What do you notice you do well?";
        break;
      case 'chris':
        response += "\n\nGrowth comes through practicing these steps. What's the deeper challenge here?";
        break;
      case 'jill':
        response += "\n\nThis connects to your psychological well-being. How does this resonate with you?";
        break;
      default:
        response += "\n\nReady to practice this skill?";
    }
  }

  return response;
}

// Enhanced skill detection in user input with comprehensive matching
function detectMentionedSkills(userInput: string): string[] {
  const input = userInput.toLowerCase();
  const mentionedSkills: string[] = [];

  // Direct skill name matching (exact titles)
  for (const skill of MENTAL_ARMOR_SKILLS) {
    const titleLower = skill.title.toLowerCase();
    
    // Check for exact title match
    if (input.includes(titleLower)) {
      mentionedSkills.push(skill.id);
      continue;
    }
    
    // Check for partial title matches (3+ consecutive words)
    const titleWords = titleLower.split(' ');
    if (titleWords.length >= 3) {
      for (let i = 0; i <= titleWords.length - 3; i++) {
        const phrase = titleWords.slice(i, i + 3).join(' ');
        if (input.includes(phrase)) {
          mentionedSkills.push(skill.id);
          break;
        }
      }
    }
    
    // Check for skill ID mention
    if (input.includes(skill.id)) {
      mentionedSkills.push(skill.id);
    }
  }

  // Enhanced keyword-based skill detection with context
  const skillKeywords = {
    'foundations-resilience': ['foundations', 'resilience foundation', 'resilience science', 'neuroplasticity', 'growth mindset'],
    'flex-your-strengths': ['flex strengths', 'character strengths', 'VIA', 'signature strengths', 'strengths finder'],
    'values-based-living': ['values based', 'values living', 'core values', 'purpose', 'meaningful goals'],
    'spiritual-resilience': ['spiritual resilience', 'spiritual strength', 'faith', 'meaning', 'transcendence'],
    'cultivate-gratitude': ['cultivate gratitude', 'gratitude practice', 'thankfulness', 'appreciation'],
    'mindfulness': ['mindfulness', 'mindful', 'meditation', 'present moment', 'awareness'],
    'reframe': ['reframe', 'reframing', 'cognitive reframe', 'change perspective'],
    'balance-your-thinking': ['balance thinking', 'thinking balance', 'cognitive balance', 'examine evidence'],
    'whats-most-important': ['most important', 'priorities', 'what matters', 'values clarification'],
    'interpersonal-problem-solving': ['interpersonal', 'problem solving', 'conflict resolution', 'wind-up approach'],
    'good-listening': ['good listening', 'active listening', 'celebrate good news', 'ABCDE']
  };

  // Check for skill-specific keywords with context
  for (const [skillId, keywords] of Object.entries(skillKeywords)) {
    if (mentionedSkills.includes(skillId)) continue;
    
    for (const keyword of keywords) {
      if (input.includes(keyword)) {
        // Only add if it seems like they're asking about the skill specifically
        const contextWords = ['what is', 'tell me about', 'explain', 'describe', 'skill', 'about', 'how to', 'steps'];
        const hasContext = contextWords.some(word => input.includes(word));
        
        if (hasContext || input.length < 50) { // Short messages are likely direct questions
          mentionedSkills.push(skillId);
          break;
        }
      }
    }
  }

  return [...new Set(mentionedSkills)]; // Remove duplicates
}

async function callOpenAI(messages: Array<{ role: "system" | "user" | "assistant"; content: string }>) {
  const res = await fetch(`${BASE_URL}/chat/completions`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: MODEL,
      response_format: { type: "text" },
      temperature: 0.3,
      max_tokens: 300,
      messages,
    }),
  });

  if (!res.ok) {
    const t = await res.text().catch(() => "");
    throw new Error(`OpenAI error ${res.status}: ${t || res.statusText}`);
  }
  
  const data = await res.json();
  const choice = data?.choices?.[0];
  const text = choice?.message?.content ?? "";
  return text;
}

// Updated main response function with integrated approach
export async function getImprovedCoachResponse(opts: {
  history: ChatMsg[];
  userTurn: string;
  coach?: CoachPersona;
  allowSuggestions?: boolean;
}): Promise<CoachResponse> {
  const { history, userTurn, coach, allowSuggestions = true } = opts;

  // 1. Check if user is asking about a specific skill - PRIORITY RESPONSE
  const mentionedSkills = detectMentionedSkills(userTurn);
  
  if (mentionedSkills.length > 0) {
    // Respond directly with exact curriculum content
    const skillResponse = getDirectSkillResponse(mentionedSkills[0], coach);
    
    // Still provide skill suggestions for related skills
    const relatedSuggestions = allowSuggestions ? 
      EnhancedSkillSuggestions.getSuggestions(userTurn, 2).filter(s => s.skillId !== mentionedSkills[0]) : 
      [];
    
    return {
      text: skillResponse,
      suggestedSkills: relatedSuggestions,
      suggestionMethod: 'curriculum',
      content: skillResponse,
    };
  }

  // 2. Get curriculum-based skill suggestions
  let suggestedSkills: SkillSuggestion[] = [];
  let suggestionMethod: 'curriculum' | 'ai-validated' | 'fallback' = 'curriculum';

  if (allowSuggestions) {
    try {
      suggestedSkills = EnhancedSkillSuggestions.getSuggestions(userTurn, 2);
      suggestionMethod = 'curriculum';
    } catch (error) {
      console.warn('Curriculum suggestions failed:', error);
      suggestionMethod = 'fallback';
    }
  }

  // 3. Get AI coaching response with comprehensive integrated prompt
  const sys = buildEnhancedSystemPrompt(coach);
  const messages = [
    { role: "system" as const, content: sys },
    ...history.map(m => ({ 
      role: m.role as "user" | "assistant", 
      content: m.content 
    })),
    { role: "user" as const, content: userTurn },
  ];

  let text = "";
  try {
    text = await callOpenAI(messages);
    text = validateCurriculumLanguage(text);
  } catch (error) {
    console.warn('OpenAI call failed:', error);
    text = getFallbackResponse(coach);
  }

  return {
    text: text.trim(),
    suggestedSkills,
    suggestionMethod,
    content: text.trim(),
  };
}

/**
 * Validate that AI response doesn't reference non-existent skills
 */
function validateCurriculumLanguage(text: string): string {
  const validSkillTitles = MENTAL_ARMOR_SKILLS.map((s) => s.title.toLowerCase());
  const lines = text.split('\n');
  
  return lines.map((line: string) => {
    // Remove any references to skills not in our catalog
    const lowerLine = line.toLowerCase();
    
    // Check if line mentions skills not in our catalog
    const mentionsInvalidSkill = lowerLine.includes('skill') && 
      !validSkillTitles.some((title: string) => lowerLine.includes(title));
    
    if (mentionsInvalidSkill) {
      // Replace with more general language
      return line.replace(/try the .* skill/gi, 'consider using Mental Armor‚Ñ¢ techniques')
                .replace(/use .* skill/gi, 'apply your training')
                .replace(/practice .* skill/gi, 'practice your techniques');
    }
    
    return line;
  }).join('\n');
}

/**
 * Fallback responses that stay within curriculum
 */
function getFallbackResponse(coach?: CoachPersona): string {
  const fallbacks = [
    "I hear what you're sharing. Mental Armor‚Ñ¢ training gives us tools to build resilience through practice.",
    "That sounds challenging. The Mental Armor‚Ñ¢ approach helps us develop skills to withstand, recover, and grow.",
    "Thank you for sharing that with me. Building mental armor takes practice and the right tools for each situation.",
  ];
  
  let response = fallbacks[Math.floor(Math.random() * fallbacks.length)];
  
  // Add coach-specific guidance without referencing specific skills
  if (coach?.name) {
    switch (coach.name.toLowerCase()) {
      case 'rhonda':
        response += " What's your next move?";
        break;
      case 'scotty':
        response += " Take it one step at a time.";
        break;
      case 'terry':
        response += " Let's focus on what works in the real world.";
        break;
      case 'aj':
        response += " You have strengths to build on.";
        break;
      case 'chris':
        response += " Growth comes through practice and reflection.";
        break;
    }
  }
  
  return response;
}

// Backward compatibility wrapper
export function createMentalArmorAI(config?: string | { coach?: CoachPersona; allowSuggestions?: boolean }) {
  let coach: CoachPersona | undefined;
  let allowSuggestions = true;

  if (typeof config === "string") {
    coach = { name: config };
  } else if (config) {
    coach = config.coach;
    allowSuggestions = config.allowSuggestions ?? true;
  }

  return {
    async send(userText: string, history: ChatMsg[]) {
      return getImprovedCoachResponse({ 
        history, 
        userTurn: userText, 
        coach, 
        allowSuggestions 
      });
    },

    // Legacy compatibility
    async generateResponse(...args: unknown[]) {
      let userText = "";
      let history: ChatMsg[] = [];
      
      if (args.length === 2) {
        [userText, history] = args as [string, ChatMsg[]];
      } else if (args.length === 3) {
        [userText, , history] = args as [string, unknown, ChatMsg[]];
      }
      
      return getImprovedCoachResponse({ 
        history, 
        userTurn: userText, 
        coach, 
        allowSuggestions 
      });
    },
  };
}


